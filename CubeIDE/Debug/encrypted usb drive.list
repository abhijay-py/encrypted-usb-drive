
encrypted usb drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d1c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002ef4  08002ef4  00003ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f0c  08002f0c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002f0c  08002f0c  00003f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f14  08002f14  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f14  08002f14  00003f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f18  08002f18  00003f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002f1c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  2000000c  08002f28  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08002f28  000040f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de38  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e8e  00000000  00000000  00011e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  00013d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ae  00000000  00000000  00014968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000208ba  00000000  00000000  00015316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eeca  00000000  00000000  00035bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca8ff  00000000  00000000  00044a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010f399  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033c4  00000000  00000000  0010f3dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  001127a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002edc 	.word	0x08002edc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002edc 	.word	0x08002edc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <calculate_checksum>:
#include "main.h"

#define PACKET_SIZE 8 // This file only supports sending / receiving 8 byte packets

// Calculates the checksum that is sent as the 7th byte of the UART packet
static uint16_t calculate_checksum(const uint8_t buff[]) {
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	return buff[1] ^ buff[2] ^ buff[3] ^ buff[4] ^ buff[5];
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	3301      	adds	r3, #1
 8000514:	781a      	ldrb	r2, [r3, #0]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	3302      	adds	r3, #2
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4053      	eors	r3, r2
 800051e:	b2da      	uxtb	r2, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	3303      	adds	r3, #3
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	4053      	eors	r3, r2
 8000528:	b2da      	uxtb	r2, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	3304      	adds	r3, #4
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	4053      	eors	r3, r2
 8000532:	b2da      	uxtb	r2, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	3305      	adds	r3, #5
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	4053      	eors	r3, r2
 800053c:	b2db      	uxtb	r3, r3
}
 800053e:	4618      	mov	r0, r3
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr

0800054a <generate_package>:
// Generates an 8 byte package and stores it inside buff (see page 3 of the datasheet).
static void generate_package(
	uint8_t buff[],
	const uint8_t cmd,
	const uint8_t p1, const uint8_t p2, const uint8_t p3
) {
 800054a:	b580      	push	{r7, lr}
 800054c:	b082      	sub	sp, #8
 800054e:	af00      	add	r7, sp, #0
 8000550:	6078      	str	r0, [r7, #4]
 8000552:	4608      	mov	r0, r1
 8000554:	4611      	mov	r1, r2
 8000556:	461a      	mov	r2, r3
 8000558:	4603      	mov	r3, r0
 800055a:	70fb      	strb	r3, [r7, #3]
 800055c:	460b      	mov	r3, r1
 800055e:	70bb      	strb	r3, [r7, #2]
 8000560:	4613      	mov	r3, r2
 8000562:	707b      	strb	r3, [r7, #1]
	buff[0] = 0xF5;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	22f5      	movs	r2, #245	@ 0xf5
 8000568:	701a      	strb	r2, [r3, #0]
	buff[1] = cmd;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	3301      	adds	r3, #1
 800056e:	78fa      	ldrb	r2, [r7, #3]
 8000570:	701a      	strb	r2, [r3, #0]
	buff[2] = p1;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	3302      	adds	r3, #2
 8000576:	78ba      	ldrb	r2, [r7, #2]
 8000578:	701a      	strb	r2, [r3, #0]
	buff[3] = p2;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	3303      	adds	r3, #3
 800057e:	787a      	ldrb	r2, [r7, #1]
 8000580:	701a      	strb	r2, [r3, #0]
	buff[4] = p3;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	3304      	adds	r3, #4
 8000586:	7c3a      	ldrb	r2, [r7, #16]
 8000588:	701a      	strb	r2, [r3, #0]
	buff[5] = 0;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	3305      	adds	r3, #5
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]
	buff[6] = calculate_checksum(buff);
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f7ff ffb8 	bl	8000508 <calculate_checksum>
 8000598:	4603      	mov	r3, r0
 800059a:	461a      	mov	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	3306      	adds	r3, #6
 80005a0:	b2d2      	uxtb	r2, r2
 80005a2:	701a      	strb	r2, [r3, #0]
	buff[7] = 0xF5;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	3307      	adds	r3, #7
 80005a8:	22f5      	movs	r2, #245	@ 0xf5
 80005aa:	701a      	strb	r2, [r3, #0]
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <send_command>:
// Sends an 8 byte command to the fingerprint sensor.
// Returns FINGERPRINT_OK or the type of error
static Fingerprint_Status send_command(
	const uint8_t cmd,
	const uint8_t p1, const uint8_t p2, const uint8_t p3
) {
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b089      	sub	sp, #36	@ 0x24
 80005b8:	af02      	add	r7, sp, #8
 80005ba:	4604      	mov	r4, r0
 80005bc:	4608      	mov	r0, r1
 80005be:	4611      	mov	r1, r2
 80005c0:	461a      	mov	r2, r3
 80005c2:	4623      	mov	r3, r4
 80005c4:	71fb      	strb	r3, [r7, #7]
 80005c6:	4603      	mov	r3, r0
 80005c8:	71bb      	strb	r3, [r7, #6]
 80005ca:	460b      	mov	r3, r1
 80005cc:	717b      	strb	r3, [r7, #5]
 80005ce:	4613      	mov	r3, r2
 80005d0:	713b      	strb	r3, [r7, #4]
	// Generate tx_buff
	uint8_t tx_buff[PACKET_SIZE];
	generate_package(tx_buff, cmd, p1, p2, p3);
 80005d2:	797c      	ldrb	r4, [r7, #5]
 80005d4:	79ba      	ldrb	r2, [r7, #6]
 80005d6:	79f9      	ldrb	r1, [r7, #7]
 80005d8:	f107 000c 	add.w	r0, r7, #12
 80005dc:	793b      	ldrb	r3, [r7, #4]
 80005de:	9300      	str	r3, [sp, #0]
 80005e0:	4623      	mov	r3, r4
 80005e2:	f7ff ffb2 	bl	800054a <generate_package>

	// Transmit tx_buff
	const HAL_StatusTypeDef tx_result
		= HAL_UART_Transmit(&huart5, tx_buff, PACKET_SIZE, 1000);
 80005e6:	f107 010c 	add.w	r1, r7, #12
 80005ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005ee:	2208      	movs	r2, #8
 80005f0:	4807      	ldr	r0, [pc, #28]	@ (8000610 <send_command+0x5c>)
 80005f2:	f001 ffe5 	bl	80025c0 <HAL_UART_Transmit>
 80005f6:	4603      	mov	r3, r0
 80005f8:	75fb      	strb	r3, [r7, #23]
	return tx_result != HAL_OK ? FINGERPRINT_HAL_ERROR : FINGERPRINT_OK;
 80005fa:	7dfb      	ldrb	r3, [r7, #23]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	bf14      	ite	ne
 8000600:	2301      	movne	r3, #1
 8000602:	2300      	moveq	r3, #0
 8000604:	b2db      	uxtb	r3, r3
}
 8000606:	4618      	mov	r0, r3
 8000608:	371c      	adds	r7, #28
 800060a:	46bd      	mov	sp, r7
 800060c:	bd90      	pop	{r4, r7, pc}
 800060e:	bf00      	nop
 8000610:	200000a4 	.word	0x200000a4

08000614 <receive_acknowledgment>:
// Returns FINGERPRINT_OK or the type of error
static Fingerprint_Status receive_acknowledgment(
	const uint32_t rx_timeout,
	const uint8_t cmd,
	uint8_t* q1, uint8_t* q2, uint8_t* q3
) {
 8000614:	b590      	push	{r4, r7, lr}
 8000616:	b08d      	sub	sp, #52	@ 0x34
 8000618:	af02      	add	r7, sp, #8
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	607a      	str	r2, [r7, #4]
 800061e:	603b      	str	r3, [r7, #0]
 8000620:	460b      	mov	r3, r1
 8000622:	72fb      	strb	r3, [r7, #11]
	// Receive UART data and put it in rx_buff
	uint8_t rx_buff[PACKET_SIZE];
	const HAL_StatusTypeDef rx_result
		= HAL_UART_Receive(&huart5, rx_buff, PACKET_SIZE, rx_timeout);
 8000624:	f107 011c 	add.w	r1, r7, #28
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	2208      	movs	r2, #8
 800062c:	4826      	ldr	r0, [pc, #152]	@ (80006c8 <receive_acknowledgment+0xb4>)
 800062e:	f002 f852 	bl	80026d6 <HAL_UART_Receive>
 8000632:	4603      	mov	r3, r0
 8000634:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (rx_result != HAL_OK) {
 8000638:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <receive_acknowledgment+0x30>
		return FINGERPRINT_HAL_ERROR;
 8000640:	2301      	movs	r3, #1
 8000642:	e03d      	b.n	80006c0 <receive_acknowledgment+0xac>
	}

	// Generate the expected result
	uint8_t exp_rx_buff[PACKET_SIZE];
	// I don't know what I expect to get for q1, q2, and q3, so I set them all to 0.
	generate_package(exp_rx_buff, cmd, 0, 0, 0);
 8000644:	7af9      	ldrb	r1, [r7, #11]
 8000646:	f107 0014 	add.w	r0, r7, #20
 800064a:	2300      	movs	r3, #0
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2300      	movs	r3, #0
 8000650:	2200      	movs	r2, #0
 8000652:	f7ff ff7a 	bl	800054a <generate_package>

	// Check the UART data against the expected result
	// Check the first, last, cmd, and zero bytes
	if (
		exp_rx_buff[0] != rx_buff[0]
 8000656:	7d3a      	ldrb	r2, [r7, #20]
 8000658:	7f3b      	ldrb	r3, [r7, #28]
	if (
 800065a:	429a      	cmp	r2, r3
 800065c:	d10d      	bne.n	800067a <receive_acknowledgment+0x66>
		|| exp_rx_buff[1] != rx_buff[1]
 800065e:	7d7a      	ldrb	r2, [r7, #21]
 8000660:	7f7b      	ldrb	r3, [r7, #29]
 8000662:	429a      	cmp	r2, r3
 8000664:	d109      	bne.n	800067a <receive_acknowledgment+0x66>
		|| exp_rx_buff[5] != rx_buff[5]
 8000666:	7e7a      	ldrb	r2, [r7, #25]
 8000668:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800066c:	429a      	cmp	r2, r3
 800066e:	d104      	bne.n	800067a <receive_acknowledgment+0x66>
		|| exp_rx_buff[7] != rx_buff[7]
 8000670:	7efa      	ldrb	r2, [r7, #27]
 8000672:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000676:	429a      	cmp	r2, r3
 8000678:	d001      	beq.n	800067e <receive_acknowledgment+0x6a>
	) {
		return FINGERPRINT_RX_ERROR;
 800067a:	2302      	movs	r3, #2
 800067c:	e020      	b.n	80006c0 <receive_acknowledgment+0xac>
	}

	// Check the checksum
	if (rx_buff[6] != calculate_checksum(rx_buff)) {
 800067e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000682:	461c      	mov	r4, r3
 8000684:	f107 031c 	add.w	r3, r7, #28
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ff3d 	bl	8000508 <calculate_checksum>
 800068e:	4603      	mov	r3, r0
 8000690:	429c      	cmp	r4, r3
 8000692:	d001      	beq.n	8000698 <receive_acknowledgment+0x84>
		return FINGERPRINT_RX_ERROR;
 8000694:	2302      	movs	r3, #2
 8000696:	e013      	b.n	80006c0 <receive_acknowledgment+0xac>
	}

	// If the code gets to here then all the checks have passed,
	// so we can set q1, q2, and q3 accordingly.
	if (q1 != NULL) {
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d002      	beq.n	80006a4 <receive_acknowledgment+0x90>
		*q1 = rx_buff[2];
 800069e:	7fba      	ldrb	r2, [r7, #30]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	701a      	strb	r2, [r3, #0]
	}
	if (q2 != NULL) {
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d002      	beq.n	80006b0 <receive_acknowledgment+0x9c>
		*q2 = rx_buff[3];
 80006aa:	7ffa      	ldrb	r2, [r7, #31]
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	701a      	strb	r2, [r3, #0]
	}
	if (q3 != NULL) {
 80006b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d003      	beq.n	80006be <receive_acknowledgment+0xaa>
		*q3 = rx_buff[4];
 80006b6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80006ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80006bc:	701a      	strb	r2, [r3, #0]
	}

	return FINGERPRINT_OK;
 80006be:	2300      	movs	r3, #0
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	372c      	adds	r7, #44	@ 0x2c
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd90      	pop	{r4, r7, pc}
 80006c8:	200000a4 	.word	0x200000a4

080006cc <send_and_receive_command>:
static Fingerprint_Status send_and_receive_command(
	const uint32_t rx_timeout,
	const uint8_t cmd,
	const uint8_t p1, const uint8_t p2, const uint8_t p3,
	uint8_t* q1, uint8_t* q2, uint8_t* q3
) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af02      	add	r7, sp, #8
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	4608      	mov	r0, r1
 80006d6:	4611      	mov	r1, r2
 80006d8:	461a      	mov	r2, r3
 80006da:	4603      	mov	r3, r0
 80006dc:	70fb      	strb	r3, [r7, #3]
 80006de:	460b      	mov	r3, r1
 80006e0:	70bb      	strb	r3, [r7, #2]
 80006e2:	4613      	mov	r3, r2
 80006e4:	707b      	strb	r3, [r7, #1]
	Fingerprint_Status tx_result = send_command(cmd, p1, p2, p3);
 80006e6:	7e3b      	ldrb	r3, [r7, #24]
 80006e8:	787a      	ldrb	r2, [r7, #1]
 80006ea:	78b9      	ldrb	r1, [r7, #2]
 80006ec:	78f8      	ldrb	r0, [r7, #3]
 80006ee:	f7ff ff61 	bl	80005b4 <send_command>
 80006f2:	4603      	mov	r3, r0
 80006f4:	73fb      	strb	r3, [r7, #15]
	if (tx_result != FINGERPRINT_OK) {
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <send_and_receive_command+0x34>
		return tx_result;
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	e008      	b.n	8000712 <send_and_receive_command+0x46>
	}

	return receive_acknowledgment(rx_timeout, cmd, q1, q2, q3);
 8000700:	78f9      	ldrb	r1, [r7, #3]
 8000702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000704:	9300      	str	r3, [sp, #0]
 8000706:	6a3b      	ldr	r3, [r7, #32]
 8000708:	69fa      	ldr	r2, [r7, #28]
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f7ff ff82 	bl	8000614 <receive_acknowledgment>
 8000710:	4603      	mov	r3, r0
}
 8000712:	4618      	mov	r0, r3
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <delete_specified_user>:

// Sends the delete specified user (2.4) command in the datasheet.
// ack_type is called q3 in the datasheet.
Fingerprint_Status delete_specified_user(uint16_t user_id, uint8_t* ack_type) {
 800071a:	b580      	push	{r7, lr}
 800071c:	b086      	sub	sp, #24
 800071e:	af04      	add	r7, sp, #16
 8000720:	4603      	mov	r3, r0
 8000722:	6039      	str	r1, [r7, #0]
 8000724:	80fb      	strh	r3, [r7, #6]
	return send_and_receive_command(
 8000726:	88fb      	ldrh	r3, [r7, #6]
 8000728:	0a1b      	lsrs	r3, r3, #8
 800072a:	b29b      	uxth	r3, r3
 800072c:	b2da      	uxtb	r2, r3
 800072e:	88fb      	ldrh	r3, [r7, #6]
 8000730:	b2d9      	uxtb	r1, r3
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	9303      	str	r3, [sp, #12]
 8000736:	2300      	movs	r3, #0
 8000738:	9302      	str	r3, [sp, #8]
 800073a:	2300      	movs	r3, #0
 800073c:	9301      	str	r3, [sp, #4]
 800073e:	2300      	movs	r3, #0
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	460b      	mov	r3, r1
 8000744:	2104      	movs	r1, #4
 8000746:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800074a:	f7ff ffbf 	bl	80006cc <send_and_receive_command>
 800074e:	4603      	mov	r3, r0
		1000,
		0x04,
		(uint8_t)(user_id >> 8), (uint8_t)user_id, 0,
		NULL, NULL, ack_type
	);
}
 8000750:	4618      	mov	r0, r3
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <compare_1_1>:

// Sends the compare 1:1 (2.7) command in the datasheet.
// ack_type is called q3 in the datasheet.
Fingerprint_Status compare_1_1(uint16_t user_id, uint8_t* ack_type) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af04      	add	r7, sp, #16
 800075e:	4603      	mov	r3, r0
 8000760:	6039      	str	r1, [r7, #0]
 8000762:	80fb      	strh	r3, [r7, #6]
	return send_and_receive_command(
 8000764:	88fb      	ldrh	r3, [r7, #6]
 8000766:	0a1b      	lsrs	r3, r3, #8
 8000768:	b29b      	uxth	r3, r3
 800076a:	b2da      	uxtb	r2, r3
 800076c:	88fb      	ldrh	r3, [r7, #6]
 800076e:	b2d9      	uxtb	r1, r3
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	9303      	str	r3, [sp, #12]
 8000774:	2300      	movs	r3, #0
 8000776:	9302      	str	r3, [sp, #8]
 8000778:	2300      	movs	r3, #0
 800077a:	9301      	str	r3, [sp, #4]
 800077c:	2300      	movs	r3, #0
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	460b      	mov	r3, r1
 8000782:	210b      	movs	r1, #11
 8000784:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8000788:	f7ff ffa0 	bl	80006cc <send_and_receive_command>
 800078c:	4603      	mov	r3, r0
		20000,
		0x0B,
		(uint8_t)(user_id >> 8), (uint8_t)user_id, 0,
		NULL, NULL, ack_type
	);
}
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <add_fingerprint>:
// ack_type is called q3 in the datasheet.
Fingerprint_Status add_fingerprint(
	unsigned int press_num,
	uint16_t user_id, uint8_t user_privilege,
	uint8_t* ack_type
) {
 8000796:	b580      	push	{r7, lr}
 8000798:	b088      	sub	sp, #32
 800079a:	af04      	add	r7, sp, #16
 800079c:	60f8      	str	r0, [r7, #12]
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	460b      	mov	r3, r1
 80007a2:	817b      	strh	r3, [r7, #10]
 80007a4:	4613      	mov	r3, r2
 80007a6:	727b      	strb	r3, [r7, #9]
	if (press_num < 1 || press_num > 3) {
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d002      	beq.n	80007b4 <add_fingerprint+0x1e>
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	2b03      	cmp	r3, #3
 80007b2:	d901      	bls.n	80007b8 <add_fingerprint+0x22>
		return FINGERPRINT_INVALID_PARAM;
 80007b4:	2303      	movs	r3, #3
 80007b6:	e015      	b.n	80007e4 <add_fingerprint+0x4e>
	}
	return send_and_receive_command(
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	b2d9      	uxtb	r1, r3
 80007bc:	897b      	ldrh	r3, [r7, #10]
 80007be:	0a1b      	lsrs	r3, r3, #8
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	897b      	ldrh	r3, [r7, #10]
 80007c6:	b2d8      	uxtb	r0, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	9303      	str	r3, [sp, #12]
 80007cc:	2300      	movs	r3, #0
 80007ce:	9302      	str	r3, [sp, #8]
 80007d0:	2300      	movs	r3, #0
 80007d2:	9301      	str	r3, [sp, #4]
 80007d4:	7a7b      	ldrb	r3, [r7, #9]
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	4603      	mov	r3, r0
 80007da:	f644 6020 	movw	r0, #20000	@ 0x4e20
 80007de:	f7ff ff75 	bl	80006cc <send_and_receive_command>
 80007e2:	4603      	mov	r3, r0
		20000,
		press_num,
		(uint8_t)(user_id >> 8), (uint8_t)user_id, user_privilege,
		NULL, NULL, ack_type
	);
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <HAL_TIM_PeriodElapsedCallback>:
volatile uint32_t keypad_matrix[NUM_ROWS][NUM_COLS] = {0};

static volatile int current_row = 0;

// Callback: timer has reset
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	// Check which version of the time triggered this callback
	if (htim == &htim7) {
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4a2d      	ldr	r2, [pc, #180]	@ (80008ac <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d153      	bne.n	80008a4 <HAL_TIM_PeriodElapsedCallback+0xb8>
		uint32_t column_data = (GPIOB->IDR >> 4) & 0b111;
 80007fc:	4b2c      	ldr	r3, [pc, #176]	@ (80008b0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80007fe:	691b      	ldr	r3, [r3, #16]
 8000800:	091b      	lsrs	r3, r3, #4
 8000802:	f003 0307 	and.w	r3, r3, #7
 8000806:	60bb      	str	r3, [r7, #8]

		// update keypad_matrix (debouncing)
		for (int i = 0; i < NUM_COLS; i++) {
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	e02a      	b.n	8000864 <HAL_TIM_PeriodElapsedCallback+0x78>
			if ((column_data & (1 << i)) != GPIO_PIN_RESET) { // That column is pressed
 800080e:	2201      	movs	r2, #1
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	fa02 f303 	lsl.w	r3, r2, r3
 8000816:	461a      	mov	r2, r3
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	4013      	ands	r3, r2
 800081c:	2b00      	cmp	r3, #0
 800081e:	d013      	beq.n	8000848 <HAL_TIM_PeriodElapsedCallback+0x5c>
				keypad_matrix[current_row][i]++;
 8000820:	4b24      	ldr	r3, [pc, #144]	@ (80008b4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	4824      	ldr	r0, [pc, #144]	@ (80008b8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000826:	4613      	mov	r3, r2
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	4413      	add	r3, r2
 800082c:	68f9      	ldr	r1, [r7, #12]
 800082e:	440b      	add	r3, r1
 8000830:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000834:	1c59      	adds	r1, r3, #1
 8000836:	4820      	ldr	r0, [pc, #128]	@ (80008b8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000838:	4613      	mov	r3, r2
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	4413      	add	r3, r2
 800083e:	68fa      	ldr	r2, [r7, #12]
 8000840:	4413      	add	r3, r2
 8000842:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8000846:	e00a      	b.n	800085e <HAL_TIM_PeriodElapsedCallback+0x72>
			} else {
				keypad_matrix[current_row][i] = 0;
 8000848:	4b1a      	ldr	r3, [pc, #104]	@ (80008b4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	491a      	ldr	r1, [pc, #104]	@ (80008b8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800084e:	4613      	mov	r3, r2
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	4413      	add	r3, r2
 8000854:	68fa      	ldr	r2, [r7, #12]
 8000856:	4413      	add	r3, r2
 8000858:	2200      	movs	r2, #0
 800085a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < NUM_COLS; i++) {
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	3301      	adds	r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2b02      	cmp	r3, #2
 8000868:	ddd1      	ble.n	800080e <HAL_TIM_PeriodElapsedCallback+0x22>
			}
		}

		HAL_GPIO_WritePin(GPIOB, (uint16_t)0x000F, GPIO_PIN_RESET); // Set the output of all the rows to 0
 800086a:	2200      	movs	r2, #0
 800086c:	210f      	movs	r1, #15
 800086e:	4810      	ldr	r0, [pc, #64]	@ (80008b0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000870:	f000 fe84 	bl	800157c <HAL_GPIO_WritePin>
		if (current_row == 3) {
 8000874:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b03      	cmp	r3, #3
 800087a:	d103      	bne.n	8000884 <HAL_TIM_PeriodElapsedCallback+0x98>
			current_row = 0;
 800087c:	4b0d      	ldr	r3, [pc, #52]	@ (80008b4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	e004      	b.n	800088e <HAL_TIM_PeriodElapsedCallback+0xa2>
		} else {
			current_row++;
 8000884:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	3301      	adds	r3, #1
 800088a:	4a0a      	ldr	r2, [pc, #40]	@ (80008b4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800088c:	6013      	str	r3, [r2, #0]
		}
		HAL_GPIO_WritePin(GPIOB, (uint16_t)(1 << current_row), GPIO_PIN_SET); // Set the output of the current row to 1
 800088e:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2201      	movs	r2, #1
 8000894:	fa02 f303 	lsl.w	r3, r2, r3
 8000898:	b29b      	uxth	r3, r3
 800089a:	2201      	movs	r2, #1
 800089c:	4619      	mov	r1, r3
 800089e:	4804      	ldr	r0, [pc, #16]	@ (80008b0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80008a0:	f000 fe6c 	bl	800157c <HAL_GPIO_WritePin>
	}
}
 80008a4:	bf00      	nop
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	2000005c 	.word	0x2000005c
 80008b0:	40020400 	.word	0x40020400
 80008b4:	20000058 	.word	0x20000058
 80008b8:	20000028 	.word	0x20000028

080008bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c2:	f000 fb43 	bl	8000f4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c6:	f000 f84f 	bl	8000968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ca:	f000 f90b 	bl	8000ae4 <MX_GPIO_Init>
  MX_TIM7_Init();
 80008ce:	f000 f8a9 	bl	8000a24 <MX_TIM7_Init>
  MX_UART5_Init();
 80008d2:	f000 f8dd 	bl	8000a90 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7); // Start timer
 80008d6:	4822      	ldr	r0, [pc, #136]	@ (8000960 <main+0xa4>)
 80008d8:	f001 fb5e 	bl	8001f98 <HAL_TIM_Base_Start_IT>

  uint8_t ack_type;
  Fingerprint_Status status;
  status = delete_specified_user(0, &ack_type);
 80008dc:	1dbb      	adds	r3, r7, #6
 80008de:	4619      	mov	r1, r3
 80008e0:	2000      	movs	r0, #0
 80008e2:	f7ff ff1a 	bl	800071a <delete_specified_user>
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
  status = add_fingerprint(1, 0, 1, &ack_type);
 80008ea:	1dbb      	adds	r3, r7, #6
 80008ec:	2201      	movs	r2, #1
 80008ee:	2100      	movs	r1, #0
 80008f0:	2001      	movs	r0, #1
 80008f2:	f7ff ff50 	bl	8000796 <add_fingerprint>
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
  status = add_fingerprint(2, 0, 1, &ack_type);
 80008fa:	1dbb      	adds	r3, r7, #6
 80008fc:	2201      	movs	r2, #1
 80008fe:	2100      	movs	r1, #0
 8000900:	2002      	movs	r0, #2
 8000902:	f7ff ff48 	bl	8000796 <add_fingerprint>
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]
  status = add_fingerprint(3, 0, 1, &ack_type);
 800090a:	1dbb      	adds	r3, r7, #6
 800090c:	2201      	movs	r2, #1
 800090e:	2100      	movs	r1, #0
 8000910:	2003      	movs	r0, #3
 8000912:	f7ff ff40 	bl	8000796 <add_fingerprint>
 8000916:	4603      	mov	r3, r0
 8000918:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  status = compare_1_1(0, &ack_type);
 800091a:	1dbb      	adds	r3, r7, #6
 800091c:	4619      	mov	r1, r3
 800091e:	2000      	movs	r0, #0
 8000920:	f7ff ff1a 	bl	8000758 <compare_1_1>
 8000924:	4603      	mov	r3, r0
 8000926:	71fb      	strb	r3, [r7, #7]
	  if (ack_type == ACK_SUCCESS) {
 8000928:	79bb      	ldrb	r3, [r7, #6]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d10b      	bne.n	8000946 <main+0x8a>
		  // Turn blue LED on if match
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800092e:	2201      	movs	r2, #1
 8000930:	2180      	movs	r1, #128	@ 0x80
 8000932:	480c      	ldr	r0, [pc, #48]	@ (8000964 <main+0xa8>)
 8000934:	f000 fe22 	bl	800157c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800093e:	4809      	ldr	r0, [pc, #36]	@ (8000964 <main+0xa8>)
 8000940:	f000 fe1c 	bl	800157c <HAL_GPIO_WritePin>
 8000944:	e7e9      	b.n	800091a <main+0x5e>
	  } else {
		  // Turn red LED on if not match
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	2180      	movs	r1, #128	@ 0x80
 800094a:	4806      	ldr	r0, [pc, #24]	@ (8000964 <main+0xa8>)
 800094c:	f000 fe16 	bl	800157c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000950:	2201      	movs	r2, #1
 8000952:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000956:	4803      	ldr	r0, [pc, #12]	@ (8000964 <main+0xa8>)
 8000958:	f000 fe10 	bl	800157c <HAL_GPIO_WritePin>
	  status = compare_1_1(0, &ack_type);
 800095c:	e7dd      	b.n	800091a <main+0x5e>
 800095e:	bf00      	nop
 8000960:	2000005c 	.word	0x2000005c
 8000964:	40020400 	.word	0x40020400

08000968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b094      	sub	sp, #80	@ 0x50
 800096c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	2234      	movs	r2, #52	@ 0x34
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f002 fa84 	bl	8002e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800097c:	f107 0308 	add.w	r3, r7, #8
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800098c:	2300      	movs	r3, #0
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	4b22      	ldr	r3, [pc, #136]	@ (8000a1c <SystemClock_Config+0xb4>)
 8000992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000994:	4a21      	ldr	r2, [pc, #132]	@ (8000a1c <SystemClock_Config+0xb4>)
 8000996:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800099a:	6413      	str	r3, [r2, #64]	@ 0x40
 800099c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a1c <SystemClock_Config+0xb4>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a8:	2300      	movs	r3, #0
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000a20 <SystemClock_Config+0xb8>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a20 <SystemClock_Config+0xb8>)
 80009b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009b6:	6013      	str	r3, [r2, #0]
 80009b8:	4b19      	ldr	r3, [pc, #100]	@ (8000a20 <SystemClock_Config+0xb8>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009c4:	2302      	movs	r3, #2
 80009c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009c8:	2301      	movs	r3, #1
 80009ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009cc:	2310      	movs	r3, #16
 80009ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4618      	mov	r0, r3
 80009da:	f001 f809 	bl	80019f0 <HAL_RCC_OscConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80009e4:	f000 f97e 	bl	8000ce4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e8:	230f      	movs	r3, #15
 80009ea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009fe:	f107 0308 	add.w	r3, r7, #8
 8000a02:	2100      	movs	r1, #0
 8000a04:	4618      	mov	r0, r3
 8000a06:	f000 fdd3 	bl	80015b0 <HAL_RCC_ClockConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000a10:	f000 f968 	bl	8000ce4 <Error_Handler>
  }
}
 8000a14:	bf00      	nop
 8000a16:	3750      	adds	r7, #80	@ 0x50
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40007000 	.word	0x40007000

08000a24 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000a32:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <MX_TIM7_Init+0x64>)
 8000a34:	4a15      	ldr	r2, [pc, #84]	@ (8000a8c <MX_TIM7_Init+0x68>)
 8000a36:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 8000a38:	4b13      	ldr	r3, [pc, #76]	@ (8000a88 <MX_TIM7_Init+0x64>)
 8000a3a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000a3e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a40:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <MX_TIM7_Init+0x64>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4;
 8000a46:	4b10      	ldr	r3, [pc, #64]	@ (8000a88 <MX_TIM7_Init+0x64>)
 8000a48:	2204      	movs	r2, #4
 8000a4a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a88 <MX_TIM7_Init+0x64>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000a52:	480d      	ldr	r0, [pc, #52]	@ (8000a88 <MX_TIM7_Init+0x64>)
 8000a54:	f001 fa50 	bl	8001ef8 <HAL_TIM_Base_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000a5e:	f000 f941 	bl	8000ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a62:	2300      	movs	r3, #0
 8000a64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000a6a:	463b      	mov	r3, r7
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4806      	ldr	r0, [pc, #24]	@ (8000a88 <MX_TIM7_Init+0x64>)
 8000a70:	f001 fcc6 	bl	8002400 <HAL_TIMEx_MasterConfigSynchronization>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000a7a:	f000 f933 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	2000005c 	.word	0x2000005c
 8000a8c:	40001400 	.word	0x40001400

08000a90 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000a94:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <MX_UART5_Init+0x4c>)
 8000a96:	4a12      	ldr	r2, [pc, #72]	@ (8000ae0 <MX_UART5_Init+0x50>)
 8000a98:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 19200;
 8000a9a:	4b10      	ldr	r3, [pc, #64]	@ (8000adc <MX_UART5_Init+0x4c>)
 8000a9c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8000aa0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <MX_UART5_Init+0x4c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <MX_UART5_Init+0x4c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	@ (8000adc <MX_UART5_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	@ (8000adc <MX_UART5_Init+0x4c>)
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aba:	4b08      	ldr	r3, [pc, #32]	@ (8000adc <MX_UART5_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <MX_UART5_Init+0x4c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000ac6:	4805      	ldr	r0, [pc, #20]	@ (8000adc <MX_UART5_Init+0x4c>)
 8000ac8:	f001 fd2a 	bl	8002520 <HAL_UART_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000ad2:	f000 f907 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200000a4 	.word	0x200000a4
 8000ae0:	40005000 	.word	0x40005000

08000ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08c      	sub	sp, #48	@ 0x30
 8000ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	61bb      	str	r3, [r7, #24]
 8000afe:	4b73      	ldr	r3, [pc, #460]	@ (8000ccc <MX_GPIO_Init+0x1e8>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	4a72      	ldr	r2, [pc, #456]	@ (8000ccc <MX_GPIO_Init+0x1e8>)
 8000b04:	f043 0304 	orr.w	r3, r3, #4
 8000b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0a:	4b70      	ldr	r3, [pc, #448]	@ (8000ccc <MX_GPIO_Init+0x1e8>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	f003 0304 	and.w	r3, r3, #4
 8000b12:	61bb      	str	r3, [r7, #24]
 8000b14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
 8000b1a:	4b6c      	ldr	r3, [pc, #432]	@ (8000ccc <MX_GPIO_Init+0x1e8>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	4a6b      	ldr	r2, [pc, #428]	@ (8000ccc <MX_GPIO_Init+0x1e8>)
 8000b20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b26:	4b69      	ldr	r3, [pc, #420]	@ (8000ccc <MX_GPIO_Init+0x1e8>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	4b65      	ldr	r3, [pc, #404]	@ (8000ccc <MX_GPIO_Init+0x1e8>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	4a64      	ldr	r2, [pc, #400]	@ (8000ccc <MX_GPIO_Init+0x1e8>)
 8000b3c:	f043 0302 	orr.w	r3, r3, #2
 8000b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b42:	4b62      	ldr	r3, [pc, #392]	@ (8000ccc <MX_GPIO_Init+0x1e8>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	f003 0302 	and.w	r3, r3, #2
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	4b5e      	ldr	r3, [pc, #376]	@ (8000ccc <MX_GPIO_Init+0x1e8>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	4a5d      	ldr	r2, [pc, #372]	@ (8000ccc <MX_GPIO_Init+0x1e8>)
 8000b58:	f043 0308 	orr.w	r3, r3, #8
 8000b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5e:	4b5b      	ldr	r3, [pc, #364]	@ (8000ccc <MX_GPIO_Init+0x1e8>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	f003 0308 	and.w	r3, r3, #8
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	4b57      	ldr	r3, [pc, #348]	@ (8000ccc <MX_GPIO_Init+0x1e8>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	4a56      	ldr	r2, [pc, #344]	@ (8000ccc <MX_GPIO_Init+0x1e8>)
 8000b74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7a:	4b54      	ldr	r3, [pc, #336]	@ (8000ccc <MX_GPIO_Init+0x1e8>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	4b50      	ldr	r3, [pc, #320]	@ (8000ccc <MX_GPIO_Init+0x1e8>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	4a4f      	ldr	r2, [pc, #316]	@ (8000ccc <MX_GPIO_Init+0x1e8>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b96:	4b4d      	ldr	r3, [pc, #308]	@ (8000ccc <MX_GPIO_Init+0x1e8>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|LD3_Pin
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f244 018f 	movw	r1, #16527	@ 0x408f
 8000ba8:	4849      	ldr	r0, [pc, #292]	@ (8000cd0 <MX_GPIO_Init+0x1ec>)
 8000baa:	f000 fce7 	bl	800157c <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2140      	movs	r1, #64	@ 0x40
 8000bb2:	4848      	ldr	r0, [pc, #288]	@ (8000cd4 <MX_GPIO_Init+0x1f0>)
 8000bb4:	f000 fce2 	bl	800157c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bb8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bbe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 031c 	add.w	r3, r7, #28
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4842      	ldr	r0, [pc, #264]	@ (8000cd8 <MX_GPIO_Init+0x1f4>)
 8000bd0:	f000 fb40 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bd4:	2308      	movs	r3, #8
 8000bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be0:	2303      	movs	r3, #3
 8000be2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000be4:	2305      	movs	r3, #5
 8000be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	4619      	mov	r1, r3
 8000bee:	483a      	ldr	r0, [pc, #232]	@ (8000cd8 <MX_GPIO_Init+0x1f4>)
 8000bf0:	f000 fb30 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 LD3_Pin
                           PB3 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|LD3_Pin
 8000bf4:	f244 038f 	movw	r3, #16527	@ 0x408f
 8000bf8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_3|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4830      	ldr	r0, [pc, #192]	@ (8000cd0 <MX_GPIO_Init+0x1ec>)
 8000c0e:	f000 fb21 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000c12:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c20:	2303      	movs	r3, #3
 8000c22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c24:	2305      	movs	r3, #5
 8000c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4828      	ldr	r0, [pc, #160]	@ (8000cd0 <MX_GPIO_Init+0x1ec>)
 8000c30:	f000 fb10 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c34:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c42:	2303      	movs	r3, #3
 8000c44:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c46:	2307      	movs	r3, #7
 8000c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4822      	ldr	r0, [pc, #136]	@ (8000cdc <MX_GPIO_Init+0x1f8>)
 8000c52:	f000 faff 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c56:	2340      	movs	r3, #64	@ 0x40
 8000c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4819      	ldr	r0, [pc, #100]	@ (8000cd4 <MX_GPIO_Init+0x1f0>)
 8000c6e:	f000 faf1 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c72:	2380      	movs	r3, #128	@ 0x80
 8000c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c76:	2300      	movs	r3, #0
 8000c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	4619      	mov	r1, r3
 8000c84:	4813      	ldr	r0, [pc, #76]	@ (8000cd4 <MX_GPIO_Init+0x1f0>)
 8000c86:	f000 fae5 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c8a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c9c:	230a      	movs	r3, #10
 8000c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca0:	f107 031c 	add.w	r3, r7, #28
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480e      	ldr	r0, [pc, #56]	@ (8000ce0 <MX_GPIO_Init+0x1fc>)
 8000ca8:	f000 fad4 	bl	8001254 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000cac:	2370      	movs	r3, #112	@ 0x70
 8000cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4804      	ldr	r0, [pc, #16]	@ (8000cd0 <MX_GPIO_Init+0x1ec>)
 8000cc0:	f000 fac8 	bl	8001254 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cc4:	bf00      	nop
 8000cc6:	3730      	adds	r7, #48	@ 0x30
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020400 	.word	0x40020400
 8000cd4:	40021800 	.word	0x40021800
 8000cd8:	40020800 	.word	0x40020800
 8000cdc:	40020c00 	.word	0x40020c00
 8000ce0:	40020000 	.word	0x40020000

08000ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce8:	b672      	cpsid	i
}
 8000cea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <Error_Handler+0x8>

08000cf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	4b10      	ldr	r3, [pc, #64]	@ (8000d3c <HAL_MspInit+0x4c>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cfe:	4a0f      	ldr	r2, [pc, #60]	@ (8000d3c <HAL_MspInit+0x4c>)
 8000d00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d06:	4b0d      	ldr	r3, [pc, #52]	@ (8000d3c <HAL_MspInit+0x4c>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	603b      	str	r3, [r7, #0]
 8000d16:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <HAL_MspInit+0x4c>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1a:	4a08      	ldr	r2, [pc, #32]	@ (8000d3c <HAL_MspInit+0x4c>)
 8000d1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d22:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <HAL_MspInit+0x4c>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	40023800 	.word	0x40023800

08000d40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a0e      	ldr	r2, [pc, #56]	@ (8000d88 <HAL_TIM_Base_MspInit+0x48>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d115      	bne.n	8000d7e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	4b0d      	ldr	r3, [pc, #52]	@ (8000d8c <HAL_TIM_Base_MspInit+0x4c>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8000d8c <HAL_TIM_Base_MspInit+0x4c>)
 8000d5c:	f043 0320 	orr.w	r3, r3, #32
 8000d60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d62:	4b0a      	ldr	r3, [pc, #40]	@ (8000d8c <HAL_TIM_Base_MspInit+0x4c>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d66:	f003 0320 	and.w	r3, r3, #32
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2100      	movs	r1, #0
 8000d72:	2037      	movs	r0, #55	@ 0x37
 8000d74:	f000 fa37 	bl	80011e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000d78:	2037      	movs	r0, #55	@ 0x37
 8000d7a:	f000 fa50 	bl	800121e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM7_MspInit 1 */

  }

}
 8000d7e:	bf00      	nop
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40001400 	.word	0x40001400
 8000d8c:	40023800 	.word	0x40023800

08000d90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	@ 0x28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a28      	ldr	r2, [pc, #160]	@ (8000e50 <HAL_UART_MspInit+0xc0>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d14a      	bne.n	8000e48 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	4b27      	ldr	r3, [pc, #156]	@ (8000e54 <HAL_UART_MspInit+0xc4>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dba:	4a26      	ldr	r2, [pc, #152]	@ (8000e54 <HAL_UART_MspInit+0xc4>)
 8000dbc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000dc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dc2:	4b24      	ldr	r3, [pc, #144]	@ (8000e54 <HAL_UART_MspInit+0xc4>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	4b20      	ldr	r3, [pc, #128]	@ (8000e54 <HAL_UART_MspInit+0xc4>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	4a1f      	ldr	r2, [pc, #124]	@ (8000e54 <HAL_UART_MspInit+0xc4>)
 8000dd8:	f043 0302 	orr.w	r3, r3, #2
 8000ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dde:	4b1d      	ldr	r3, [pc, #116]	@ (8000e54 <HAL_UART_MspInit+0xc4>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	4b19      	ldr	r3, [pc, #100]	@ (8000e54 <HAL_UART_MspInit+0xc4>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	4a18      	ldr	r2, [pc, #96]	@ (8000e54 <HAL_UART_MspInit+0xc4>)
 8000df4:	f043 0308 	orr.w	r3, r3, #8
 8000df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfa:	4b16      	ldr	r3, [pc, #88]	@ (8000e54 <HAL_UART_MspInit+0xc4>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	f003 0308 	and.w	r3, r3, #8
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PB13     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e14:	2303      	movs	r3, #3
 8000e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_UART5;
 8000e18:	230b      	movs	r3, #11
 8000e1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	4619      	mov	r1, r3
 8000e22:	480d      	ldr	r0, [pc, #52]	@ (8000e58 <HAL_UART_MspInit+0xc8>)
 8000e24:	f000 fa16 	bl	8001254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e28:	2304      	movs	r3, #4
 8000e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e34:	2303      	movs	r3, #3
 8000e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000e38:	2308      	movs	r3, #8
 8000e3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	4619      	mov	r1, r3
 8000e42:	4806      	ldr	r0, [pc, #24]	@ (8000e5c <HAL_UART_MspInit+0xcc>)
 8000e44:	f000 fa06 	bl	8001254 <HAL_GPIO_Init>

  /* USER CODE END UART5_MspInit 1 */

  }

}
 8000e48:	bf00      	nop
 8000e4a:	3728      	adds	r7, #40	@ 0x28
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40005000 	.word	0x40005000
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40020400 	.word	0x40020400
 8000e5c:	40020c00 	.word	0x40020c00

08000e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <NMI_Handler+0x4>

08000e68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <HardFault_Handler+0x4>

08000e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <MemManage_Handler+0x4>

08000e78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <BusFault_Handler+0x4>

08000e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <UsageFault_Handler+0x4>

08000e88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb6:	f000 f89b 	bl	8000ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000ec4:	4802      	ldr	r0, [pc, #8]	@ (8000ed0 <TIM7_IRQHandler+0x10>)
 8000ec6:	f001 f8d7 	bl	8002078 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	2000005c 	.word	0x2000005c

08000ed4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed8:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <SystemInit+0x20>)
 8000eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ede:	4a05      	ldr	r2, [pc, #20]	@ (8000ef4 <SystemInit+0x20>)
 8000ee0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ee4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000ef8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f30 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000efc:	f7ff ffea 	bl	8000ed4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f00:	480c      	ldr	r0, [pc, #48]	@ (8000f34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f02:	490d      	ldr	r1, [pc, #52]	@ (8000f38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f04:	4a0d      	ldr	r2, [pc, #52]	@ (8000f3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f08:	e002      	b.n	8000f10 <LoopCopyDataInit>

08000f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0e:	3304      	adds	r3, #4

08000f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f14:	d3f9      	bcc.n	8000f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f16:	4a0a      	ldr	r2, [pc, #40]	@ (8000f40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f18:	4c0a      	ldr	r4, [pc, #40]	@ (8000f44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f1c:	e001      	b.n	8000f22 <LoopFillZerobss>

08000f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f20:	3204      	adds	r2, #4

08000f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f24:	d3fb      	bcc.n	8000f1e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000f26:	f001 ffb5 	bl	8002e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f2a:	f7ff fcc7 	bl	80008bc <main>
  bx  lr    
 8000f2e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f30:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f38:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f3c:	08002f1c 	.word	0x08002f1c
  ldr r2, =_sbss
 8000f40:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f44:	200000f0 	.word	0x200000f0

08000f48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f48:	e7fe      	b.n	8000f48 <ADC_IRQHandler>
	...

08000f4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f50:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <HAL_Init+0x40>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a0d      	ldr	r2, [pc, #52]	@ (8000f8c <HAL_Init+0x40>)
 8000f56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f8c <HAL_Init+0x40>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a0a      	ldr	r2, [pc, #40]	@ (8000f8c <HAL_Init+0x40>)
 8000f62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f68:	4b08      	ldr	r3, [pc, #32]	@ (8000f8c <HAL_Init+0x40>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a07      	ldr	r2, [pc, #28]	@ (8000f8c <HAL_Init+0x40>)
 8000f6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f74:	2003      	movs	r0, #3
 8000f76:	f000 f92b 	bl	80011d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f000 f808 	bl	8000f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f80:	f7ff feb6 	bl	8000cf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40023c00 	.word	0x40023c00

08000f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f98:	4b12      	ldr	r3, [pc, #72]	@ (8000fe4 <HAL_InitTick+0x54>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b12      	ldr	r3, [pc, #72]	@ (8000fe8 <HAL_InitTick+0x58>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 f943 	bl	800123a <HAL_SYSTICK_Config>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00e      	b.n	8000fdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b0f      	cmp	r3, #15
 8000fc2:	d80a      	bhi.n	8000fda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fcc:	f000 f90b 	bl	80011e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd0:	4a06      	ldr	r2, [pc, #24]	@ (8000fec <HAL_InitTick+0x5c>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e000      	b.n	8000fdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	20000008 	.word	0x20000008
 8000fec:	20000004 	.word	0x20000004

08000ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <HAL_IncTick+0x20>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <HAL_IncTick+0x24>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4413      	add	r3, r2
 8001000:	4a04      	ldr	r2, [pc, #16]	@ (8001014 <HAL_IncTick+0x24>)
 8001002:	6013      	str	r3, [r2, #0]
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000008 	.word	0x20000008
 8001014:	200000ec 	.word	0x200000ec

08001018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return uwTick;
 800101c:	4b03      	ldr	r3, [pc, #12]	@ (800102c <HAL_GetTick+0x14>)
 800101e:	681b      	ldr	r3, [r3, #0]
}
 8001020:	4618      	mov	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	200000ec 	.word	0x200000ec

08001030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001040:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800104c:	4013      	ands	r3, r2
 800104e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001058:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800105c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001062:	4a04      	ldr	r2, [pc, #16]	@ (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	60d3      	str	r3, [r2, #12]
}
 8001068:	bf00      	nop
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800107c:	4b04      	ldr	r3, [pc, #16]	@ (8001090 <__NVIC_GetPriorityGrouping+0x18>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	f003 0307 	and.w	r3, r3, #7
}
 8001086:	4618      	mov	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	db0b      	blt.n	80010be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	f003 021f 	and.w	r2, r3, #31
 80010ac:	4907      	ldr	r1, [pc, #28]	@ (80010cc <__NVIC_EnableIRQ+0x38>)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	095b      	lsrs	r3, r3, #5
 80010b4:	2001      	movs	r0, #1
 80010b6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000e100 	.word	0xe000e100

080010d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	db0a      	blt.n	80010fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	490c      	ldr	r1, [pc, #48]	@ (800111c <__NVIC_SetPriority+0x4c>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	0112      	lsls	r2, r2, #4
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	440b      	add	r3, r1
 80010f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f8:	e00a      	b.n	8001110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4908      	ldr	r1, [pc, #32]	@ (8001120 <__NVIC_SetPriority+0x50>)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	3b04      	subs	r3, #4
 8001108:	0112      	lsls	r2, r2, #4
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	440b      	add	r3, r1
 800110e:	761a      	strb	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000e100 	.word	0xe000e100
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	@ 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f1c3 0307 	rsb	r3, r3, #7
 800113e:	2b04      	cmp	r3, #4
 8001140:	bf28      	it	cs
 8001142:	2304      	movcs	r3, #4
 8001144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3304      	adds	r3, #4
 800114a:	2b06      	cmp	r3, #6
 800114c:	d902      	bls.n	8001154 <NVIC_EncodePriority+0x30>
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3b03      	subs	r3, #3
 8001152:	e000      	b.n	8001156 <NVIC_EncodePriority+0x32>
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	f04f 32ff 	mov.w	r2, #4294967295
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43da      	mvns	r2, r3
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	401a      	ands	r2, r3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800116c:	f04f 31ff 	mov.w	r1, #4294967295
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa01 f303 	lsl.w	r3, r1, r3
 8001176:	43d9      	mvns	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	4313      	orrs	r3, r2
         );
}
 800117e:	4618      	mov	r0, r3
 8001180:	3724      	adds	r7, #36	@ 0x24
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800119c:	d301      	bcc.n	80011a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119e:	2301      	movs	r3, #1
 80011a0:	e00f      	b.n	80011c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a2:	4a0a      	ldr	r2, [pc, #40]	@ (80011cc <SysTick_Config+0x40>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011aa:	210f      	movs	r1, #15
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295
 80011b0:	f7ff ff8e 	bl	80010d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b4:	4b05      	ldr	r3, [pc, #20]	@ (80011cc <SysTick_Config+0x40>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ba:	4b04      	ldr	r3, [pc, #16]	@ (80011cc <SysTick_Config+0x40>)
 80011bc:	2207      	movs	r2, #7
 80011be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	e000e010 	.word	0xe000e010

080011d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff29 	bl	8001030 <__NVIC_SetPriorityGrouping>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b086      	sub	sp, #24
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4603      	mov	r3, r0
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f8:	f7ff ff3e 	bl	8001078 <__NVIC_GetPriorityGrouping>
 80011fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	68b9      	ldr	r1, [r7, #8]
 8001202:	6978      	ldr	r0, [r7, #20]
 8001204:	f7ff ff8e 	bl	8001124 <NVIC_EncodePriority>
 8001208:	4602      	mov	r2, r0
 800120a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120e:	4611      	mov	r1, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff5d 	bl	80010d0 <__NVIC_SetPriority>
}
 8001216:	bf00      	nop
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff31 	bl	8001094 <__NVIC_EnableIRQ>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff ffa2 	bl	800118c <SysTick_Config>
 8001248:	4603      	mov	r3, r0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001254:	b480      	push	{r7}
 8001256:	b089      	sub	sp, #36	@ 0x24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001266:	2300      	movs	r3, #0
 8001268:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
 800126e:	e165      	b.n	800153c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001270:	2201      	movs	r2, #1
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	4013      	ands	r3, r2
 8001282:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	429a      	cmp	r2, r3
 800128a:	f040 8154 	bne.w	8001536 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 0303 	and.w	r3, r3, #3
 8001296:	2b01      	cmp	r3, #1
 8001298:	d005      	beq.n	80012a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d130      	bne.n	8001308 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	2203      	movs	r2, #3
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	68da      	ldr	r2, [r3, #12]
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012dc:	2201      	movs	r2, #1
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	091b      	lsrs	r3, r3, #4
 80012f2:	f003 0201 	and.w	r2, r3, #1
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	2b03      	cmp	r3, #3
 8001312:	d017      	beq.n	8001344 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	2203      	movs	r2, #3
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d123      	bne.n	8001398 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	08da      	lsrs	r2, r3, #3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3208      	adds	r2, #8
 8001358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800135c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	f003 0307 	and.w	r3, r3, #7
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	220f      	movs	r2, #15
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	691a      	ldr	r2, [r3, #16]
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	08da      	lsrs	r2, r3, #3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3208      	adds	r2, #8
 8001392:	69b9      	ldr	r1, [r7, #24]
 8001394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	2203      	movs	r2, #3
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0203 	and.w	r2, r3, #3
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 80ae 	beq.w	8001536 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	4b5d      	ldr	r3, [pc, #372]	@ (8001554 <HAL_GPIO_Init+0x300>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e2:	4a5c      	ldr	r2, [pc, #368]	@ (8001554 <HAL_GPIO_Init+0x300>)
 80013e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ea:	4b5a      	ldr	r3, [pc, #360]	@ (8001554 <HAL_GPIO_Init+0x300>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013f6:	4a58      	ldr	r2, [pc, #352]	@ (8001558 <HAL_GPIO_Init+0x304>)
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	089b      	lsrs	r3, r3, #2
 80013fc:	3302      	adds	r3, #2
 80013fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f003 0303 	and.w	r3, r3, #3
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	220f      	movs	r2, #15
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a4f      	ldr	r2, [pc, #316]	@ (800155c <HAL_GPIO_Init+0x308>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d025      	beq.n	800146e <HAL_GPIO_Init+0x21a>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a4e      	ldr	r2, [pc, #312]	@ (8001560 <HAL_GPIO_Init+0x30c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d01f      	beq.n	800146a <HAL_GPIO_Init+0x216>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a4d      	ldr	r2, [pc, #308]	@ (8001564 <HAL_GPIO_Init+0x310>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d019      	beq.n	8001466 <HAL_GPIO_Init+0x212>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a4c      	ldr	r2, [pc, #304]	@ (8001568 <HAL_GPIO_Init+0x314>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d013      	beq.n	8001462 <HAL_GPIO_Init+0x20e>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a4b      	ldr	r2, [pc, #300]	@ (800156c <HAL_GPIO_Init+0x318>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d00d      	beq.n	800145e <HAL_GPIO_Init+0x20a>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a4a      	ldr	r2, [pc, #296]	@ (8001570 <HAL_GPIO_Init+0x31c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d007      	beq.n	800145a <HAL_GPIO_Init+0x206>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a49      	ldr	r2, [pc, #292]	@ (8001574 <HAL_GPIO_Init+0x320>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d101      	bne.n	8001456 <HAL_GPIO_Init+0x202>
 8001452:	2306      	movs	r3, #6
 8001454:	e00c      	b.n	8001470 <HAL_GPIO_Init+0x21c>
 8001456:	2307      	movs	r3, #7
 8001458:	e00a      	b.n	8001470 <HAL_GPIO_Init+0x21c>
 800145a:	2305      	movs	r3, #5
 800145c:	e008      	b.n	8001470 <HAL_GPIO_Init+0x21c>
 800145e:	2304      	movs	r3, #4
 8001460:	e006      	b.n	8001470 <HAL_GPIO_Init+0x21c>
 8001462:	2303      	movs	r3, #3
 8001464:	e004      	b.n	8001470 <HAL_GPIO_Init+0x21c>
 8001466:	2302      	movs	r3, #2
 8001468:	e002      	b.n	8001470 <HAL_GPIO_Init+0x21c>
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <HAL_GPIO_Init+0x21c>
 800146e:	2300      	movs	r3, #0
 8001470:	69fa      	ldr	r2, [r7, #28]
 8001472:	f002 0203 	and.w	r2, r2, #3
 8001476:	0092      	lsls	r2, r2, #2
 8001478:	4093      	lsls	r3, r2
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001480:	4935      	ldr	r1, [pc, #212]	@ (8001558 <HAL_GPIO_Init+0x304>)
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	089b      	lsrs	r3, r3, #2
 8001486:	3302      	adds	r3, #2
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800148e:	4b3a      	ldr	r3, [pc, #232]	@ (8001578 <HAL_GPIO_Init+0x324>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014b2:	4a31      	ldr	r2, [pc, #196]	@ (8001578 <HAL_GPIO_Init+0x324>)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001578 <HAL_GPIO_Init+0x324>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014dc:	4a26      	ldr	r2, [pc, #152]	@ (8001578 <HAL_GPIO_Init+0x324>)
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014e2:	4b25      	ldr	r3, [pc, #148]	@ (8001578 <HAL_GPIO_Init+0x324>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4013      	ands	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001506:	4a1c      	ldr	r2, [pc, #112]	@ (8001578 <HAL_GPIO_Init+0x324>)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800150c:	4b1a      	ldr	r3, [pc, #104]	@ (8001578 <HAL_GPIO_Init+0x324>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001530:	4a11      	ldr	r2, [pc, #68]	@ (8001578 <HAL_GPIO_Init+0x324>)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3301      	adds	r3, #1
 800153a:	61fb      	str	r3, [r7, #28]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	2b0f      	cmp	r3, #15
 8001540:	f67f ae96 	bls.w	8001270 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	3724      	adds	r7, #36	@ 0x24
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800
 8001558:	40013800 	.word	0x40013800
 800155c:	40020000 	.word	0x40020000
 8001560:	40020400 	.word	0x40020400
 8001564:	40020800 	.word	0x40020800
 8001568:	40020c00 	.word	0x40020c00
 800156c:	40021000 	.word	0x40021000
 8001570:	40021400 	.word	0x40021400
 8001574:	40021800 	.word	0x40021800
 8001578:	40013c00 	.word	0x40013c00

0800157c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	807b      	strh	r3, [r7, #2]
 8001588:	4613      	mov	r3, r2
 800158a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800158c:	787b      	ldrb	r3, [r7, #1]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001592:	887a      	ldrh	r2, [r7, #2]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001598:	e003      	b.n	80015a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800159a:	887b      	ldrh	r3, [r7, #2]
 800159c:	041a      	lsls	r2, r3, #16
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	619a      	str	r2, [r3, #24]
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
	...

080015b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d101      	bne.n	80015c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e0cc      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015c4:	4b68      	ldr	r3, [pc, #416]	@ (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d90c      	bls.n	80015ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d2:	4b65      	ldr	r3, [pc, #404]	@ (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015da:	4b63      	ldr	r3, [pc, #396]	@ (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d001      	beq.n	80015ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0b8      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d020      	beq.n	800163a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001604:	4b59      	ldr	r3, [pc, #356]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	4a58      	ldr	r2, [pc, #352]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800160e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0308 	and.w	r3, r3, #8
 8001618:	2b00      	cmp	r3, #0
 800161a:	d005      	beq.n	8001628 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800161c:	4b53      	ldr	r3, [pc, #332]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	4a52      	ldr	r2, [pc, #328]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001626:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001628:	4b50      	ldr	r3, [pc, #320]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	494d      	ldr	r1, [pc, #308]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	4313      	orrs	r3, r2
 8001638:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	d044      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d107      	bne.n	800165e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164e:	4b47      	ldr	r3, [pc, #284]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d119      	bne.n	800168e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e07f      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b02      	cmp	r3, #2
 8001664:	d003      	beq.n	800166e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800166a:	2b03      	cmp	r3, #3
 800166c:	d107      	bne.n	800167e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166e:	4b3f      	ldr	r3, [pc, #252]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d109      	bne.n	800168e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e06f      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167e:	4b3b      	ldr	r3, [pc, #236]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e067      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800168e:	4b37      	ldr	r3, [pc, #220]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f023 0203 	bic.w	r2, r3, #3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	4934      	ldr	r1, [pc, #208]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800169c:	4313      	orrs	r3, r2
 800169e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016a0:	f7ff fcba 	bl	8001018 <HAL_GetTick>
 80016a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a6:	e00a      	b.n	80016be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a8:	f7ff fcb6 	bl	8001018 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e04f      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016be:	4b2b      	ldr	r3, [pc, #172]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 020c 	and.w	r2, r3, #12
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d1eb      	bne.n	80016a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016d0:	4b25      	ldr	r3, [pc, #148]	@ (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d20c      	bcs.n	80016f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016de:	4b22      	ldr	r3, [pc, #136]	@ (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e6:	4b20      	ldr	r3, [pc, #128]	@ (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d001      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e032      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b00      	cmp	r3, #0
 8001702:	d008      	beq.n	8001716 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001704:	4b19      	ldr	r3, [pc, #100]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	4916      	ldr	r1, [pc, #88]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	4313      	orrs	r3, r2
 8001714:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	2b00      	cmp	r3, #0
 8001720:	d009      	beq.n	8001736 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001722:	4b12      	ldr	r3, [pc, #72]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	490e      	ldr	r1, [pc, #56]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	4313      	orrs	r3, r2
 8001734:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001736:	f000 f821 	bl	800177c <HAL_RCC_GetSysClockFreq>
 800173a:	4602      	mov	r2, r0
 800173c:	4b0b      	ldr	r3, [pc, #44]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	091b      	lsrs	r3, r3, #4
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	490a      	ldr	r1, [pc, #40]	@ (8001770 <HAL_RCC_ClockConfig+0x1c0>)
 8001748:	5ccb      	ldrb	r3, [r1, r3]
 800174a:	fa22 f303 	lsr.w	r3, r2, r3
 800174e:	4a09      	ldr	r2, [pc, #36]	@ (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001752:	4b09      	ldr	r3, [pc, #36]	@ (8001778 <HAL_RCC_ClockConfig+0x1c8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fc1a 	bl	8000f90 <HAL_InitTick>

  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40023c00 	.word	0x40023c00
 800176c:	40023800 	.word	0x40023800
 8001770:	08002ef4 	.word	0x08002ef4
 8001774:	20000000 	.word	0x20000000
 8001778:	20000004 	.word	0x20000004

0800177c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800177c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001780:	b094      	sub	sp, #80	@ 0x50
 8001782:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001784:	2300      	movs	r3, #0
 8001786:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001788:	2300      	movs	r3, #0
 800178a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800178c:	2300      	movs	r3, #0
 800178e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001794:	4b79      	ldr	r3, [pc, #484]	@ (800197c <HAL_RCC_GetSysClockFreq+0x200>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f003 030c 	and.w	r3, r3, #12
 800179c:	2b08      	cmp	r3, #8
 800179e:	d00d      	beq.n	80017bc <HAL_RCC_GetSysClockFreq+0x40>
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	f200 80e1 	bhi.w	8001968 <HAL_RCC_GetSysClockFreq+0x1ec>
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d002      	beq.n	80017b0 <HAL_RCC_GetSysClockFreq+0x34>
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	d003      	beq.n	80017b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80017ae:	e0db      	b.n	8001968 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017b0:	4b73      	ldr	r3, [pc, #460]	@ (8001980 <HAL_RCC_GetSysClockFreq+0x204>)
 80017b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017b4:	e0db      	b.n	800196e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017b6:	4b73      	ldr	r3, [pc, #460]	@ (8001984 <HAL_RCC_GetSysClockFreq+0x208>)
 80017b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017ba:	e0d8      	b.n	800196e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017bc:	4b6f      	ldr	r3, [pc, #444]	@ (800197c <HAL_RCC_GetSysClockFreq+0x200>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017c4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017c6:	4b6d      	ldr	r3, [pc, #436]	@ (800197c <HAL_RCC_GetSysClockFreq+0x200>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d063      	beq.n	800189a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017d2:	4b6a      	ldr	r3, [pc, #424]	@ (800197c <HAL_RCC_GetSysClockFreq+0x200>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	099b      	lsrs	r3, r3, #6
 80017d8:	2200      	movs	r2, #0
 80017da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80017de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80017e6:	2300      	movs	r3, #0
 80017e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80017ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80017ee:	4622      	mov	r2, r4
 80017f0:	462b      	mov	r3, r5
 80017f2:	f04f 0000 	mov.w	r0, #0
 80017f6:	f04f 0100 	mov.w	r1, #0
 80017fa:	0159      	lsls	r1, r3, #5
 80017fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001800:	0150      	lsls	r0, r2, #5
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4621      	mov	r1, r4
 8001808:	1a51      	subs	r1, r2, r1
 800180a:	6139      	str	r1, [r7, #16]
 800180c:	4629      	mov	r1, r5
 800180e:	eb63 0301 	sbc.w	r3, r3, r1
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	f04f 0300 	mov.w	r3, #0
 800181c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001820:	4659      	mov	r1, fp
 8001822:	018b      	lsls	r3, r1, #6
 8001824:	4651      	mov	r1, sl
 8001826:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800182a:	4651      	mov	r1, sl
 800182c:	018a      	lsls	r2, r1, #6
 800182e:	4651      	mov	r1, sl
 8001830:	ebb2 0801 	subs.w	r8, r2, r1
 8001834:	4659      	mov	r1, fp
 8001836:	eb63 0901 	sbc.w	r9, r3, r1
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001846:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800184a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800184e:	4690      	mov	r8, r2
 8001850:	4699      	mov	r9, r3
 8001852:	4623      	mov	r3, r4
 8001854:	eb18 0303 	adds.w	r3, r8, r3
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	462b      	mov	r3, r5
 800185c:	eb49 0303 	adc.w	r3, r9, r3
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	f04f 0300 	mov.w	r3, #0
 800186a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800186e:	4629      	mov	r1, r5
 8001870:	024b      	lsls	r3, r1, #9
 8001872:	4621      	mov	r1, r4
 8001874:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001878:	4621      	mov	r1, r4
 800187a:	024a      	lsls	r2, r1, #9
 800187c:	4610      	mov	r0, r2
 800187e:	4619      	mov	r1, r3
 8001880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001882:	2200      	movs	r2, #0
 8001884:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001886:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001888:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800188c:	f7fe fcc4 	bl	8000218 <__aeabi_uldivmod>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4613      	mov	r3, r2
 8001896:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001898:	e058      	b.n	800194c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800189a:	4b38      	ldr	r3, [pc, #224]	@ (800197c <HAL_RCC_GetSysClockFreq+0x200>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	099b      	lsrs	r3, r3, #6
 80018a0:	2200      	movs	r2, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	4611      	mov	r1, r2
 80018a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018aa:	623b      	str	r3, [r7, #32]
 80018ac:	2300      	movs	r3, #0
 80018ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80018b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018b4:	4642      	mov	r2, r8
 80018b6:	464b      	mov	r3, r9
 80018b8:	f04f 0000 	mov.w	r0, #0
 80018bc:	f04f 0100 	mov.w	r1, #0
 80018c0:	0159      	lsls	r1, r3, #5
 80018c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018c6:	0150      	lsls	r0, r2, #5
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4641      	mov	r1, r8
 80018ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80018d2:	4649      	mov	r1, r9
 80018d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018ec:	ebb2 040a 	subs.w	r4, r2, sl
 80018f0:	eb63 050b 	sbc.w	r5, r3, fp
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	f04f 0300 	mov.w	r3, #0
 80018fc:	00eb      	lsls	r3, r5, #3
 80018fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001902:	00e2      	lsls	r2, r4, #3
 8001904:	4614      	mov	r4, r2
 8001906:	461d      	mov	r5, r3
 8001908:	4643      	mov	r3, r8
 800190a:	18e3      	adds	r3, r4, r3
 800190c:	603b      	str	r3, [r7, #0]
 800190e:	464b      	mov	r3, r9
 8001910:	eb45 0303 	adc.w	r3, r5, r3
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	f04f 0300 	mov.w	r3, #0
 800191e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001922:	4629      	mov	r1, r5
 8001924:	028b      	lsls	r3, r1, #10
 8001926:	4621      	mov	r1, r4
 8001928:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800192c:	4621      	mov	r1, r4
 800192e:	028a      	lsls	r2, r1, #10
 8001930:	4610      	mov	r0, r2
 8001932:	4619      	mov	r1, r3
 8001934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001936:	2200      	movs	r2, #0
 8001938:	61bb      	str	r3, [r7, #24]
 800193a:	61fa      	str	r2, [r7, #28]
 800193c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001940:	f7fe fc6a 	bl	8000218 <__aeabi_uldivmod>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4613      	mov	r3, r2
 800194a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800194c:	4b0b      	ldr	r3, [pc, #44]	@ (800197c <HAL_RCC_GetSysClockFreq+0x200>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	0c1b      	lsrs	r3, r3, #16
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	3301      	adds	r3, #1
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800195c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800195e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001960:	fbb2 f3f3 	udiv	r3, r2, r3
 8001964:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001966:	e002      	b.n	800196e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001968:	4b05      	ldr	r3, [pc, #20]	@ (8001980 <HAL_RCC_GetSysClockFreq+0x204>)
 800196a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800196c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800196e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001970:	4618      	mov	r0, r3
 8001972:	3750      	adds	r7, #80	@ 0x50
 8001974:	46bd      	mov	sp, r7
 8001976:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800
 8001980:	00f42400 	.word	0x00f42400
 8001984:	007a1200 	.word	0x007a1200

08001988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800198c:	4b03      	ldr	r3, [pc, #12]	@ (800199c <HAL_RCC_GetHCLKFreq+0x14>)
 800198e:	681b      	ldr	r3, [r3, #0]
}
 8001990:	4618      	mov	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	20000000 	.word	0x20000000

080019a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019a4:	f7ff fff0 	bl	8001988 <HAL_RCC_GetHCLKFreq>
 80019a8:	4602      	mov	r2, r0
 80019aa:	4b05      	ldr	r3, [pc, #20]	@ (80019c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	0a9b      	lsrs	r3, r3, #10
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	4903      	ldr	r1, [pc, #12]	@ (80019c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019b6:	5ccb      	ldrb	r3, [r1, r3]
 80019b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019bc:	4618      	mov	r0, r3
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40023800 	.word	0x40023800
 80019c4:	08002f04 	.word	0x08002f04

080019c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019cc:	f7ff ffdc 	bl	8001988 <HAL_RCC_GetHCLKFreq>
 80019d0:	4602      	mov	r2, r0
 80019d2:	4b05      	ldr	r3, [pc, #20]	@ (80019e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	0b5b      	lsrs	r3, r3, #13
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	4903      	ldr	r1, [pc, #12]	@ (80019ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80019de:	5ccb      	ldrb	r3, [r1, r3]
 80019e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40023800 	.word	0x40023800
 80019ec:	08002f04 	.word	0x08002f04

080019f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e273      	b.n	8001eea <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d075      	beq.n	8001afa <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a0e:	4b88      	ldr	r3, [pc, #544]	@ (8001c30 <HAL_RCC_OscConfig+0x240>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f003 030c 	and.w	r3, r3, #12
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	d00c      	beq.n	8001a34 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a1a:	4b85      	ldr	r3, [pc, #532]	@ (8001c30 <HAL_RCC_OscConfig+0x240>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
        || \
 8001a22:	2b08      	cmp	r3, #8
 8001a24:	d112      	bne.n	8001a4c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a26:	4b82      	ldr	r3, [pc, #520]	@ (8001c30 <HAL_RCC_OscConfig+0x240>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a32:	d10b      	bne.n	8001a4c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a34:	4b7e      	ldr	r3, [pc, #504]	@ (8001c30 <HAL_RCC_OscConfig+0x240>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d05b      	beq.n	8001af8 <HAL_RCC_OscConfig+0x108>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d157      	bne.n	8001af8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e24e      	b.n	8001eea <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a54:	d106      	bne.n	8001a64 <HAL_RCC_OscConfig+0x74>
 8001a56:	4b76      	ldr	r3, [pc, #472]	@ (8001c30 <HAL_RCC_OscConfig+0x240>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a75      	ldr	r2, [pc, #468]	@ (8001c30 <HAL_RCC_OscConfig+0x240>)
 8001a5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	e01d      	b.n	8001aa0 <HAL_RCC_OscConfig+0xb0>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a6c:	d10c      	bne.n	8001a88 <HAL_RCC_OscConfig+0x98>
 8001a6e:	4b70      	ldr	r3, [pc, #448]	@ (8001c30 <HAL_RCC_OscConfig+0x240>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a6f      	ldr	r2, [pc, #444]	@ (8001c30 <HAL_RCC_OscConfig+0x240>)
 8001a74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	4b6d      	ldr	r3, [pc, #436]	@ (8001c30 <HAL_RCC_OscConfig+0x240>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a6c      	ldr	r2, [pc, #432]	@ (8001c30 <HAL_RCC_OscConfig+0x240>)
 8001a80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	e00b      	b.n	8001aa0 <HAL_RCC_OscConfig+0xb0>
 8001a88:	4b69      	ldr	r3, [pc, #420]	@ (8001c30 <HAL_RCC_OscConfig+0x240>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a68      	ldr	r2, [pc, #416]	@ (8001c30 <HAL_RCC_OscConfig+0x240>)
 8001a8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	4b66      	ldr	r3, [pc, #408]	@ (8001c30 <HAL_RCC_OscConfig+0x240>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a65      	ldr	r2, [pc, #404]	@ (8001c30 <HAL_RCC_OscConfig+0x240>)
 8001a9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d013      	beq.n	8001ad0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa8:	f7ff fab6 	bl	8001018 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab0:	f7ff fab2 	bl	8001018 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b64      	cmp	r3, #100	@ 0x64
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e213      	b.n	8001eea <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac2:	4b5b      	ldr	r3, [pc, #364]	@ (8001c30 <HAL_RCC_OscConfig+0x240>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0f0      	beq.n	8001ab0 <HAL_RCC_OscConfig+0xc0>
 8001ace:	e014      	b.n	8001afa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7ff faa2 	bl	8001018 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad8:	f7ff fa9e 	bl	8001018 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b64      	cmp	r3, #100	@ 0x64
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e1ff      	b.n	8001eea <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aea:	4b51      	ldr	r3, [pc, #324]	@ (8001c30 <HAL_RCC_OscConfig+0x240>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f0      	bne.n	8001ad8 <HAL_RCC_OscConfig+0xe8>
 8001af6:	e000      	b.n	8001afa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d063      	beq.n	8001bce <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b06:	4b4a      	ldr	r3, [pc, #296]	@ (8001c30 <HAL_RCC_OscConfig+0x240>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 030c 	and.w	r3, r3, #12
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00b      	beq.n	8001b2a <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b12:	4b47      	ldr	r3, [pc, #284]	@ (8001c30 <HAL_RCC_OscConfig+0x240>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 030c 	and.w	r3, r3, #12
        || \
 8001b1a:	2b08      	cmp	r3, #8
 8001b1c:	d11c      	bne.n	8001b58 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b1e:	4b44      	ldr	r3, [pc, #272]	@ (8001c30 <HAL_RCC_OscConfig+0x240>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d116      	bne.n	8001b58 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2a:	4b41      	ldr	r3, [pc, #260]	@ (8001c30 <HAL_RCC_OscConfig+0x240>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d005      	beq.n	8001b42 <HAL_RCC_OscConfig+0x152>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d001      	beq.n	8001b42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e1d3      	b.n	8001eea <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b42:	4b3b      	ldr	r3, [pc, #236]	@ (8001c30 <HAL_RCC_OscConfig+0x240>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	4937      	ldr	r1, [pc, #220]	@ (8001c30 <HAL_RCC_OscConfig+0x240>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b56:	e03a      	b.n	8001bce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d020      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b60:	4b34      	ldr	r3, [pc, #208]	@ (8001c34 <HAL_RCC_OscConfig+0x244>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b66:	f7ff fa57 	bl	8001018 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b6e:	f7ff fa53 	bl	8001018 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e1b4      	b.n	8001eea <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b80:	4b2b      	ldr	r3, [pc, #172]	@ (8001c30 <HAL_RCC_OscConfig+0x240>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0f0      	beq.n	8001b6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8c:	4b28      	ldr	r3, [pc, #160]	@ (8001c30 <HAL_RCC_OscConfig+0x240>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	4925      	ldr	r1, [pc, #148]	@ (8001c30 <HAL_RCC_OscConfig+0x240>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	600b      	str	r3, [r1, #0]
 8001ba0:	e015      	b.n	8001bce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ba2:	4b24      	ldr	r3, [pc, #144]	@ (8001c34 <HAL_RCC_OscConfig+0x244>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba8:	f7ff fa36 	bl	8001018 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb0:	f7ff fa32 	bl	8001018 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e193      	b.n	8001eea <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c30 <HAL_RCC_OscConfig+0x240>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f0      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d036      	beq.n	8001c48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d016      	beq.n	8001c10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be2:	4b15      	ldr	r3, [pc, #84]	@ (8001c38 <HAL_RCC_OscConfig+0x248>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be8:	f7ff fa16 	bl	8001018 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf0:	f7ff fa12 	bl	8001018 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e173      	b.n	8001eea <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c02:	4b0b      	ldr	r3, [pc, #44]	@ (8001c30 <HAL_RCC_OscConfig+0x240>)
 8001c04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f0      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x200>
 8001c0e:	e01b      	b.n	8001c48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c10:	4b09      	ldr	r3, [pc, #36]	@ (8001c38 <HAL_RCC_OscConfig+0x248>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c16:	f7ff f9ff 	bl	8001018 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c1c:	e00e      	b.n	8001c3c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c1e:	f7ff f9fb 	bl	8001018 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d907      	bls.n	8001c3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e15c      	b.n	8001eea <HAL_RCC_OscConfig+0x4fa>
 8001c30:	40023800 	.word	0x40023800
 8001c34:	42470000 	.word	0x42470000
 8001c38:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c3c:	4b8a      	ldr	r3, [pc, #552]	@ (8001e68 <HAL_RCC_OscConfig+0x478>)
 8001c3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1ea      	bne.n	8001c1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 8097 	beq.w	8001d84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c56:	2300      	movs	r3, #0
 8001c58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c5a:	4b83      	ldr	r3, [pc, #524]	@ (8001e68 <HAL_RCC_OscConfig+0x478>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10f      	bne.n	8001c86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	4b7f      	ldr	r3, [pc, #508]	@ (8001e68 <HAL_RCC_OscConfig+0x478>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	4a7e      	ldr	r2, [pc, #504]	@ (8001e68 <HAL_RCC_OscConfig+0x478>)
 8001c70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c76:	4b7c      	ldr	r3, [pc, #496]	@ (8001e68 <HAL_RCC_OscConfig+0x478>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c7e:	60bb      	str	r3, [r7, #8]
 8001c80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c82:	2301      	movs	r3, #1
 8001c84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c86:	4b79      	ldr	r3, [pc, #484]	@ (8001e6c <HAL_RCC_OscConfig+0x47c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d118      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c92:	4b76      	ldr	r3, [pc, #472]	@ (8001e6c <HAL_RCC_OscConfig+0x47c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a75      	ldr	r2, [pc, #468]	@ (8001e6c <HAL_RCC_OscConfig+0x47c>)
 8001c98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c9e:	f7ff f9bb 	bl	8001018 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ca6:	f7ff f9b7 	bl	8001018 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e118      	b.n	8001eea <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb8:	4b6c      	ldr	r3, [pc, #432]	@ (8001e6c <HAL_RCC_OscConfig+0x47c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d0f0      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d106      	bne.n	8001cda <HAL_RCC_OscConfig+0x2ea>
 8001ccc:	4b66      	ldr	r3, [pc, #408]	@ (8001e68 <HAL_RCC_OscConfig+0x478>)
 8001cce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cd0:	4a65      	ldr	r2, [pc, #404]	@ (8001e68 <HAL_RCC_OscConfig+0x478>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cd8:	e01c      	b.n	8001d14 <HAL_RCC_OscConfig+0x324>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2b05      	cmp	r3, #5
 8001ce0:	d10c      	bne.n	8001cfc <HAL_RCC_OscConfig+0x30c>
 8001ce2:	4b61      	ldr	r3, [pc, #388]	@ (8001e68 <HAL_RCC_OscConfig+0x478>)
 8001ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ce6:	4a60      	ldr	r2, [pc, #384]	@ (8001e68 <HAL_RCC_OscConfig+0x478>)
 8001ce8:	f043 0304 	orr.w	r3, r3, #4
 8001cec:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cee:	4b5e      	ldr	r3, [pc, #376]	@ (8001e68 <HAL_RCC_OscConfig+0x478>)
 8001cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cf2:	4a5d      	ldr	r2, [pc, #372]	@ (8001e68 <HAL_RCC_OscConfig+0x478>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cfa:	e00b      	b.n	8001d14 <HAL_RCC_OscConfig+0x324>
 8001cfc:	4b5a      	ldr	r3, [pc, #360]	@ (8001e68 <HAL_RCC_OscConfig+0x478>)
 8001cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d00:	4a59      	ldr	r2, [pc, #356]	@ (8001e68 <HAL_RCC_OscConfig+0x478>)
 8001d02:	f023 0301 	bic.w	r3, r3, #1
 8001d06:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d08:	4b57      	ldr	r3, [pc, #348]	@ (8001e68 <HAL_RCC_OscConfig+0x478>)
 8001d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d0c:	4a56      	ldr	r2, [pc, #344]	@ (8001e68 <HAL_RCC_OscConfig+0x478>)
 8001d0e:	f023 0304 	bic.w	r3, r3, #4
 8001d12:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d015      	beq.n	8001d48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d1c:	f7ff f97c 	bl	8001018 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d22:	e00a      	b.n	8001d3a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d24:	f7ff f978 	bl	8001018 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e0d7      	b.n	8001eea <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3a:	4b4b      	ldr	r3, [pc, #300]	@ (8001e68 <HAL_RCC_OscConfig+0x478>)
 8001d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0ee      	beq.n	8001d24 <HAL_RCC_OscConfig+0x334>
 8001d46:	e014      	b.n	8001d72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d48:	f7ff f966 	bl	8001018 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d4e:	e00a      	b.n	8001d66 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d50:	f7ff f962 	bl	8001018 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e0c1      	b.n	8001eea <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d66:	4b40      	ldr	r3, [pc, #256]	@ (8001e68 <HAL_RCC_OscConfig+0x478>)
 8001d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1ee      	bne.n	8001d50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d72:	7dfb      	ldrb	r3, [r7, #23]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d105      	bne.n	8001d84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d78:	4b3b      	ldr	r3, [pc, #236]	@ (8001e68 <HAL_RCC_OscConfig+0x478>)
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7c:	4a3a      	ldr	r2, [pc, #232]	@ (8001e68 <HAL_RCC_OscConfig+0x478>)
 8001d7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d82:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 80ad 	beq.w	8001ee8 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d8e:	4b36      	ldr	r3, [pc, #216]	@ (8001e68 <HAL_RCC_OscConfig+0x478>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 030c 	and.w	r3, r3, #12
 8001d96:	2b08      	cmp	r3, #8
 8001d98:	d060      	beq.n	8001e5c <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d145      	bne.n	8001e2e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da2:	4b33      	ldr	r3, [pc, #204]	@ (8001e70 <HAL_RCC_OscConfig+0x480>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da8:	f7ff f936 	bl	8001018 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db0:	f7ff f932 	bl	8001018 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e093      	b.n	8001eea <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc2:	4b29      	ldr	r3, [pc, #164]	@ (8001e68 <HAL_RCC_OscConfig+0x478>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69da      	ldr	r2, [r3, #28]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ddc:	019b      	lsls	r3, r3, #6
 8001dde:	431a      	orrs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de4:	085b      	lsrs	r3, r3, #1
 8001de6:	3b01      	subs	r3, #1
 8001de8:	041b      	lsls	r3, r3, #16
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df0:	061b      	lsls	r3, r3, #24
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df8:	071b      	lsls	r3, r3, #28
 8001dfa:	491b      	ldr	r1, [pc, #108]	@ (8001e68 <HAL_RCC_OscConfig+0x478>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e00:	4b1b      	ldr	r3, [pc, #108]	@ (8001e70 <HAL_RCC_OscConfig+0x480>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e06:	f7ff f907 	bl	8001018 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0e:	f7ff f903 	bl	8001018 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e064      	b.n	8001eea <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e20:	4b11      	ldr	r3, [pc, #68]	@ (8001e68 <HAL_RCC_OscConfig+0x478>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x41e>
 8001e2c:	e05c      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2e:	4b10      	ldr	r3, [pc, #64]	@ (8001e70 <HAL_RCC_OscConfig+0x480>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e34:	f7ff f8f0 	bl	8001018 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3c:	f7ff f8ec 	bl	8001018 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e04d      	b.n	8001eea <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4e:	4b06      	ldr	r3, [pc, #24]	@ (8001e68 <HAL_RCC_OscConfig+0x478>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCC_OscConfig+0x44c>
 8001e5a:	e045      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d107      	bne.n	8001e74 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e040      	b.n	8001eea <HAL_RCC_OscConfig+0x4fa>
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40007000 	.word	0x40007000
 8001e70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e74:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef4 <HAL_RCC_OscConfig+0x504>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d030      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d129      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d122      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001eaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d119      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eba:	085b      	lsrs	r3, r3, #1
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d10f      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ece:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d107      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ede:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d001      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40023800 	.word	0x40023800

08001ef8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e041      	b.n	8001f8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d106      	bne.n	8001f24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7fe ff0e 	bl	8000d40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2202      	movs	r2, #2
 8001f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3304      	adds	r3, #4
 8001f34:	4619      	mov	r1, r3
 8001f36:	4610      	mov	r0, r2
 8001f38:	f000 f9b6 	bl	80022a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d001      	beq.n	8001fb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e04e      	b.n	800204e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0201 	orr.w	r2, r2, #1
 8001fc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a23      	ldr	r2, [pc, #140]	@ (800205c <HAL_TIM_Base_Start_IT+0xc4>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d022      	beq.n	8002018 <HAL_TIM_Base_Start_IT+0x80>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fda:	d01d      	beq.n	8002018 <HAL_TIM_Base_Start_IT+0x80>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a1f      	ldr	r2, [pc, #124]	@ (8002060 <HAL_TIM_Base_Start_IT+0xc8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d018      	beq.n	8002018 <HAL_TIM_Base_Start_IT+0x80>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a1e      	ldr	r2, [pc, #120]	@ (8002064 <HAL_TIM_Base_Start_IT+0xcc>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d013      	beq.n	8002018 <HAL_TIM_Base_Start_IT+0x80>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a1c      	ldr	r2, [pc, #112]	@ (8002068 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d00e      	beq.n	8002018 <HAL_TIM_Base_Start_IT+0x80>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a1b      	ldr	r2, [pc, #108]	@ (800206c <HAL_TIM_Base_Start_IT+0xd4>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d009      	beq.n	8002018 <HAL_TIM_Base_Start_IT+0x80>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a19      	ldr	r2, [pc, #100]	@ (8002070 <HAL_TIM_Base_Start_IT+0xd8>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d004      	beq.n	8002018 <HAL_TIM_Base_Start_IT+0x80>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a18      	ldr	r2, [pc, #96]	@ (8002074 <HAL_TIM_Base_Start_IT+0xdc>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d111      	bne.n	800203c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2b06      	cmp	r3, #6
 8002028:	d010      	beq.n	800204c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f042 0201 	orr.w	r2, r2, #1
 8002038:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800203a:	e007      	b.n	800204c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 0201 	orr.w	r2, r2, #1
 800204a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	40010000 	.word	0x40010000
 8002060:	40000400 	.word	0x40000400
 8002064:	40000800 	.word	0x40000800
 8002068:	40000c00 	.word	0x40000c00
 800206c:	40010400 	.word	0x40010400
 8002070:	40014000 	.word	0x40014000
 8002074:	40001800 	.word	0x40001800

08002078 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d020      	beq.n	80020dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d01b      	beq.n	80020dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f06f 0202 	mvn.w	r2, #2
 80020ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	f003 0303 	and.w	r3, r3, #3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f8d2 	bl	800226c <HAL_TIM_IC_CaptureCallback>
 80020c8:	e005      	b.n	80020d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f8c4 	bl	8002258 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 f8d5 	bl	8002280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d020      	beq.n	8002128 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d01b      	beq.n	8002128 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f06f 0204 	mvn.w	r2, #4
 80020f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2202      	movs	r2, #2
 80020fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f8ac 	bl	800226c <HAL_TIM_IC_CaptureCallback>
 8002114:	e005      	b.n	8002122 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f89e 	bl	8002258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 f8af 	bl	8002280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d020      	beq.n	8002174 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	2b00      	cmp	r3, #0
 800213a:	d01b      	beq.n	8002174 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 0208 	mvn.w	r2, #8
 8002144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2204      	movs	r2, #4
 800214a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f886 	bl	800226c <HAL_TIM_IC_CaptureCallback>
 8002160:	e005      	b.n	800216e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f878 	bl	8002258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f889 	bl	8002280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f003 0310 	and.w	r3, r3, #16
 800217a:	2b00      	cmp	r3, #0
 800217c:	d020      	beq.n	80021c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f003 0310 	and.w	r3, r3, #16
 8002184:	2b00      	cmp	r3, #0
 8002186:	d01b      	beq.n	80021c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f06f 0210 	mvn.w	r2, #16
 8002190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2208      	movs	r2, #8
 8002196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f860 	bl	800226c <HAL_TIM_IC_CaptureCallback>
 80021ac:	e005      	b.n	80021ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f852 	bl	8002258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f863 	bl	8002280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00c      	beq.n	80021e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d007      	beq.n	80021e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f06f 0201 	mvn.w	r2, #1
 80021dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7fe fb04 	bl	80007ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00c      	beq.n	8002208 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d007      	beq.n	8002208 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f982 	bl	800250c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00c      	beq.n	800222c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002218:	2b00      	cmp	r3, #0
 800221a:	d007      	beq.n	800222c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f834 	bl	8002294 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f003 0320 	and.w	r3, r3, #32
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00c      	beq.n	8002250 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f003 0320 	and.w	r3, r3, #32
 800223c:	2b00      	cmp	r3, #0
 800223e:	d007      	beq.n	8002250 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0220 	mvn.w	r2, #32
 8002248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f954 	bl	80024f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002250:	bf00      	nop
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a46      	ldr	r2, [pc, #280]	@ (80023d4 <TIM_Base_SetConfig+0x12c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d013      	beq.n	80022e8 <TIM_Base_SetConfig+0x40>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022c6:	d00f      	beq.n	80022e8 <TIM_Base_SetConfig+0x40>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a43      	ldr	r2, [pc, #268]	@ (80023d8 <TIM_Base_SetConfig+0x130>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d00b      	beq.n	80022e8 <TIM_Base_SetConfig+0x40>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a42      	ldr	r2, [pc, #264]	@ (80023dc <TIM_Base_SetConfig+0x134>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d007      	beq.n	80022e8 <TIM_Base_SetConfig+0x40>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a41      	ldr	r2, [pc, #260]	@ (80023e0 <TIM_Base_SetConfig+0x138>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d003      	beq.n	80022e8 <TIM_Base_SetConfig+0x40>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a40      	ldr	r2, [pc, #256]	@ (80023e4 <TIM_Base_SetConfig+0x13c>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d108      	bne.n	80022fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a35      	ldr	r2, [pc, #212]	@ (80023d4 <TIM_Base_SetConfig+0x12c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d02b      	beq.n	800235a <TIM_Base_SetConfig+0xb2>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002308:	d027      	beq.n	800235a <TIM_Base_SetConfig+0xb2>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a32      	ldr	r2, [pc, #200]	@ (80023d8 <TIM_Base_SetConfig+0x130>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d023      	beq.n	800235a <TIM_Base_SetConfig+0xb2>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a31      	ldr	r2, [pc, #196]	@ (80023dc <TIM_Base_SetConfig+0x134>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d01f      	beq.n	800235a <TIM_Base_SetConfig+0xb2>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a30      	ldr	r2, [pc, #192]	@ (80023e0 <TIM_Base_SetConfig+0x138>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d01b      	beq.n	800235a <TIM_Base_SetConfig+0xb2>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a2f      	ldr	r2, [pc, #188]	@ (80023e4 <TIM_Base_SetConfig+0x13c>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d017      	beq.n	800235a <TIM_Base_SetConfig+0xb2>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a2e      	ldr	r2, [pc, #184]	@ (80023e8 <TIM_Base_SetConfig+0x140>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d013      	beq.n	800235a <TIM_Base_SetConfig+0xb2>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a2d      	ldr	r2, [pc, #180]	@ (80023ec <TIM_Base_SetConfig+0x144>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d00f      	beq.n	800235a <TIM_Base_SetConfig+0xb2>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a2c      	ldr	r2, [pc, #176]	@ (80023f0 <TIM_Base_SetConfig+0x148>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d00b      	beq.n	800235a <TIM_Base_SetConfig+0xb2>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a2b      	ldr	r2, [pc, #172]	@ (80023f4 <TIM_Base_SetConfig+0x14c>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d007      	beq.n	800235a <TIM_Base_SetConfig+0xb2>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a2a      	ldr	r2, [pc, #168]	@ (80023f8 <TIM_Base_SetConfig+0x150>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d003      	beq.n	800235a <TIM_Base_SetConfig+0xb2>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a29      	ldr	r2, [pc, #164]	@ (80023fc <TIM_Base_SetConfig+0x154>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d108      	bne.n	800236c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	4313      	orrs	r3, r2
 800236a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	4313      	orrs	r3, r2
 8002378:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a10      	ldr	r2, [pc, #64]	@ (80023d4 <TIM_Base_SetConfig+0x12c>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d003      	beq.n	80023a0 <TIM_Base_SetConfig+0xf8>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a12      	ldr	r2, [pc, #72]	@ (80023e4 <TIM_Base_SetConfig+0x13c>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d103      	bne.n	80023a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d105      	bne.n	80023c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	f023 0201 	bic.w	r2, r3, #1
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	611a      	str	r2, [r3, #16]
  }
}
 80023c6:	bf00      	nop
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40010000 	.word	0x40010000
 80023d8:	40000400 	.word	0x40000400
 80023dc:	40000800 	.word	0x40000800
 80023e0:	40000c00 	.word	0x40000c00
 80023e4:	40010400 	.word	0x40010400
 80023e8:	40014000 	.word	0x40014000
 80023ec:	40014400 	.word	0x40014400
 80023f0:	40014800 	.word	0x40014800
 80023f4:	40001800 	.word	0x40001800
 80023f8:	40001c00 	.word	0x40001c00
 80023fc:	40002000 	.word	0x40002000

08002400 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002410:	2b01      	cmp	r3, #1
 8002412:	d101      	bne.n	8002418 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002414:	2302      	movs	r3, #2
 8002416:	e05a      	b.n	80024ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2202      	movs	r2, #2
 8002424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800243e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	4313      	orrs	r3, r2
 8002448:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a21      	ldr	r2, [pc, #132]	@ (80024dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d022      	beq.n	80024a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002464:	d01d      	beq.n	80024a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a1d      	ldr	r2, [pc, #116]	@ (80024e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d018      	beq.n	80024a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a1b      	ldr	r2, [pc, #108]	@ (80024e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d013      	beq.n	80024a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a1a      	ldr	r2, [pc, #104]	@ (80024e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d00e      	beq.n	80024a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a18      	ldr	r2, [pc, #96]	@ (80024ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d009      	beq.n	80024a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a17      	ldr	r2, [pc, #92]	@ (80024f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d004      	beq.n	80024a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a15      	ldr	r2, [pc, #84]	@ (80024f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d10c      	bne.n	80024bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40010000 	.word	0x40010000
 80024e0:	40000400 	.word	0x40000400
 80024e4:	40000800 	.word	0x40000800
 80024e8:	40000c00 	.word	0x40000c00
 80024ec:	40010400 	.word	0x40010400
 80024f0:	40014000 	.word	0x40014000
 80024f4:	40001800 	.word	0x40001800

080024f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e042      	b.n	80025b8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d106      	bne.n	800254c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7fe fc22 	bl	8000d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2224      	movs	r2, #36	@ 0x24
 8002550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002562:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 fa09 	bl	800297c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002578:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695a      	ldr	r2, [r3, #20]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002588:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68da      	ldr	r2, [r3, #12]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002598:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2220      	movs	r2, #32
 80025a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2220      	movs	r2, #32
 80025ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08a      	sub	sp, #40	@ 0x28
 80025c4:	af02      	add	r7, sp, #8
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	603b      	str	r3, [r7, #0]
 80025cc:	4613      	mov	r3, r2
 80025ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b20      	cmp	r3, #32
 80025de:	d175      	bne.n	80026cc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d002      	beq.n	80025ec <HAL_UART_Transmit+0x2c>
 80025e6:	88fb      	ldrh	r3, [r7, #6]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e06e      	b.n	80026ce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2221      	movs	r2, #33	@ 0x21
 80025fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025fe:	f7fe fd0b 	bl	8001018 <HAL_GetTick>
 8002602:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	88fa      	ldrh	r2, [r7, #6]
 8002608:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	88fa      	ldrh	r2, [r7, #6]
 800260e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002618:	d108      	bne.n	800262c <HAL_UART_Transmit+0x6c>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d104      	bne.n	800262c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002622:	2300      	movs	r3, #0
 8002624:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	61bb      	str	r3, [r7, #24]
 800262a:	e003      	b.n	8002634 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002630:	2300      	movs	r3, #0
 8002632:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002634:	e02e      	b.n	8002694 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	2200      	movs	r2, #0
 800263e:	2180      	movs	r1, #128	@ 0x80
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 f8df 	bl	8002804 <UART_WaitOnFlagUntilTimeout>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2220      	movs	r2, #32
 8002650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e03a      	b.n	80026ce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10b      	bne.n	8002676 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	461a      	mov	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800266c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	3302      	adds	r3, #2
 8002672:	61bb      	str	r3, [r7, #24]
 8002674:	e007      	b.n	8002686 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	781a      	ldrb	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	3301      	adds	r3, #1
 8002684:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800268a:	b29b      	uxth	r3, r3
 800268c:	3b01      	subs	r3, #1
 800268e:	b29a      	uxth	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002698:	b29b      	uxth	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1cb      	bne.n	8002636 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	2200      	movs	r2, #0
 80026a6:	2140      	movs	r1, #64	@ 0x40
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 f8ab 	bl	8002804 <UART_WaitOnFlagUntilTimeout>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d005      	beq.n	80026c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2220      	movs	r2, #32
 80026b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e006      	b.n	80026ce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2220      	movs	r2, #32
 80026c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	e000      	b.n	80026ce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80026cc:	2302      	movs	r3, #2
  }
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3720      	adds	r7, #32
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b08a      	sub	sp, #40	@ 0x28
 80026da:	af02      	add	r7, sp, #8
 80026dc:	60f8      	str	r0, [r7, #12]
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	603b      	str	r3, [r7, #0]
 80026e2:	4613      	mov	r3, r2
 80026e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b20      	cmp	r3, #32
 80026f4:	f040 8081 	bne.w	80027fa <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d002      	beq.n	8002704 <HAL_UART_Receive+0x2e>
 80026fe:	88fb      	ldrh	r3, [r7, #6]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e079      	b.n	80027fc <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2222      	movs	r2, #34	@ 0x22
 8002712:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800271c:	f7fe fc7c 	bl	8001018 <HAL_GetTick>
 8002720:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	88fa      	ldrh	r2, [r7, #6]
 8002726:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	88fa      	ldrh	r2, [r7, #6]
 800272c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002736:	d108      	bne.n	800274a <HAL_UART_Receive+0x74>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d104      	bne.n	800274a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002740:	2300      	movs	r3, #0
 8002742:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	61bb      	str	r3, [r7, #24]
 8002748:	e003      	b.n	8002752 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800274e:	2300      	movs	r3, #0
 8002750:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002752:	e047      	b.n	80027e4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	2200      	movs	r2, #0
 800275c:	2120      	movs	r1, #32
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 f850 	bl	8002804 <UART_WaitOnFlagUntilTimeout>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d005      	beq.n	8002776 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2220      	movs	r2, #32
 800276e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e042      	b.n	80027fc <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10c      	bne.n	8002796 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	b29b      	uxth	r3, r3
 8002784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002788:	b29a      	uxth	r2, r3
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	3302      	adds	r3, #2
 8002792:	61bb      	str	r3, [r7, #24]
 8002794:	e01f      	b.n	80027d6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800279e:	d007      	beq.n	80027b0 <HAL_UART_Receive+0xda>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10a      	bne.n	80027be <HAL_UART_Receive+0xe8>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d106      	bne.n	80027be <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	701a      	strb	r2, [r3, #0]
 80027bc:	e008      	b.n	80027d0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	3301      	adds	r3, #1
 80027d4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027da:	b29b      	uxth	r3, r3
 80027dc:	3b01      	subs	r3, #1
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1b2      	bne.n	8002754 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2220      	movs	r2, #32
 80027f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80027f6:	2300      	movs	r3, #0
 80027f8:	e000      	b.n	80027fc <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80027fa:	2302      	movs	r3, #2
  }
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3720      	adds	r7, #32
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	4613      	mov	r3, r2
 8002812:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002814:	e03b      	b.n	800288e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281c:	d037      	beq.n	800288e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800281e:	f7fe fbfb 	bl	8001018 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	6a3a      	ldr	r2, [r7, #32]
 800282a:	429a      	cmp	r2, r3
 800282c:	d302      	bcc.n	8002834 <UART_WaitOnFlagUntilTimeout+0x30>
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e03a      	b.n	80028ae <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	f003 0304 	and.w	r3, r3, #4
 8002842:	2b00      	cmp	r3, #0
 8002844:	d023      	beq.n	800288e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2b80      	cmp	r3, #128	@ 0x80
 800284a:	d020      	beq.n	800288e <UART_WaitOnFlagUntilTimeout+0x8a>
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2b40      	cmp	r3, #64	@ 0x40
 8002850:	d01d      	beq.n	800288e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0308 	and.w	r3, r3, #8
 800285c:	2b08      	cmp	r3, #8
 800285e:	d116      	bne.n	800288e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002860:	2300      	movs	r3, #0
 8002862:	617b      	str	r3, [r7, #20]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	617b      	str	r3, [r7, #20]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 f81d 	bl	80028b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2208      	movs	r2, #8
 8002880:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e00f      	b.n	80028ae <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	4013      	ands	r3, r2
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	429a      	cmp	r2, r3
 800289c:	bf0c      	ite	eq
 800289e:	2301      	moveq	r3, #1
 80028a0:	2300      	movne	r3, #0
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	461a      	mov	r2, r3
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d0b4      	beq.n	8002816 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b095      	sub	sp, #84	@ 0x54
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	330c      	adds	r3, #12
 80028c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028c8:	e853 3f00 	ldrex	r3, [r3]
 80028cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80028ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80028d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	330c      	adds	r3, #12
 80028dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028de:	643a      	str	r2, [r7, #64]	@ 0x40
 80028e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80028e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80028e6:	e841 2300 	strex	r3, r2, [r1]
 80028ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80028ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1e5      	bne.n	80028be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	3314      	adds	r3, #20
 80028f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	e853 3f00 	ldrex	r3, [r3]
 8002900:	61fb      	str	r3, [r7, #28]
   return(result);
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	f023 0301 	bic.w	r3, r3, #1
 8002908:	64bb      	str	r3, [r7, #72]	@ 0x48
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	3314      	adds	r3, #20
 8002910:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002912:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002914:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002916:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002918:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800291a:	e841 2300 	strex	r3, r2, [r1]
 800291e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1e5      	bne.n	80028f2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292a:	2b01      	cmp	r3, #1
 800292c:	d119      	bne.n	8002962 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	330c      	adds	r3, #12
 8002934:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	e853 3f00 	ldrex	r3, [r3]
 800293c:	60bb      	str	r3, [r7, #8]
   return(result);
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	f023 0310 	bic.w	r3, r3, #16
 8002944:	647b      	str	r3, [r7, #68]	@ 0x44
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	330c      	adds	r3, #12
 800294c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800294e:	61ba      	str	r2, [r7, #24]
 8002950:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002952:	6979      	ldr	r1, [r7, #20]
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	e841 2300 	strex	r3, r2, [r1]
 800295a:	613b      	str	r3, [r7, #16]
   return(result);
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1e5      	bne.n	800292e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2220      	movs	r2, #32
 8002966:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002970:	bf00      	nop
 8002972:	3754      	adds	r7, #84	@ 0x54
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800297c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002980:	b0c0      	sub	sp, #256	@ 0x100
 8002982:	af00      	add	r7, sp, #0
 8002984:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002998:	68d9      	ldr	r1, [r3, #12]
 800299a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	ea40 0301 	orr.w	r3, r0, r1
 80029a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	431a      	orrs	r2, r3
 80029b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	431a      	orrs	r2, r3
 80029bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80029c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80029d4:	f021 010c 	bic.w	r1, r1, #12
 80029d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80029e2:	430b      	orrs	r3, r1
 80029e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80029f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029f6:	6999      	ldr	r1, [r3, #24]
 80029f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	ea40 0301 	orr.w	r3, r0, r1
 8002a02:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8002a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	4b95      	ldr	r3, [pc, #596]	@ (8002c60 <UART_SetConfig+0x2e4>)
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d011      	beq.n	8002a34 <UART_SetConfig+0xb8>
 8002a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	4b93      	ldr	r3, [pc, #588]	@ (8002c64 <UART_SetConfig+0x2e8>)
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d00b      	beq.n	8002a34 <UART_SetConfig+0xb8>
 8002a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	4b91      	ldr	r3, [pc, #580]	@ (8002c68 <UART_SetConfig+0x2ec>)
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d005      	beq.n	8002a34 <UART_SetConfig+0xb8>
 8002a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	4b8f      	ldr	r3, [pc, #572]	@ (8002c6c <UART_SetConfig+0x2f0>)
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d104      	bne.n	8002a3e <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a34:	f7fe ffc8 	bl	80019c8 <HAL_RCC_GetPCLK2Freq>
 8002a38:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002a3c:	e003      	b.n	8002a46 <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a3e:	f7fe ffaf 	bl	80019a0 <HAL_RCC_GetPCLK1Freq>
 8002a42:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a50:	f040 8110 	bne.w	8002c74 <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002a5e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002a62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002a66:	4622      	mov	r2, r4
 8002a68:	462b      	mov	r3, r5
 8002a6a:	1891      	adds	r1, r2, r2
 8002a6c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002a6e:	415b      	adcs	r3, r3
 8002a70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a76:	4621      	mov	r1, r4
 8002a78:	eb12 0801 	adds.w	r8, r2, r1
 8002a7c:	4629      	mov	r1, r5
 8002a7e:	eb43 0901 	adc.w	r9, r3, r1
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	f04f 0300 	mov.w	r3, #0
 8002a8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a96:	4690      	mov	r8, r2
 8002a98:	4699      	mov	r9, r3
 8002a9a:	4623      	mov	r3, r4
 8002a9c:	eb18 0303 	adds.w	r3, r8, r3
 8002aa0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002aa4:	462b      	mov	r3, r5
 8002aa6:	eb49 0303 	adc.w	r3, r9, r3
 8002aaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002aba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002abe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	18db      	adds	r3, r3, r3
 8002ac6:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ac8:	4613      	mov	r3, r2
 8002aca:	eb42 0303 	adc.w	r3, r2, r3
 8002ace:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ad0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002ad4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002ad8:	f7fd fb9e 	bl	8000218 <__aeabi_uldivmod>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4b63      	ldr	r3, [pc, #396]	@ (8002c70 <UART_SetConfig+0x2f4>)
 8002ae2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ae6:	095b      	lsrs	r3, r3, #5
 8002ae8:	011c      	lsls	r4, r3, #4
 8002aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002aee:	2200      	movs	r2, #0
 8002af0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002af4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002af8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002afc:	4642      	mov	r2, r8
 8002afe:	464b      	mov	r3, r9
 8002b00:	1891      	adds	r1, r2, r2
 8002b02:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002b04:	415b      	adcs	r3, r3
 8002b06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b0c:	4641      	mov	r1, r8
 8002b0e:	eb12 0a01 	adds.w	sl, r2, r1
 8002b12:	4649      	mov	r1, r9
 8002b14:	eb43 0b01 	adc.w	fp, r3, r1
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b2c:	4692      	mov	sl, r2
 8002b2e:	469b      	mov	fp, r3
 8002b30:	4643      	mov	r3, r8
 8002b32:	eb1a 0303 	adds.w	r3, sl, r3
 8002b36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b3a:	464b      	mov	r3, r9
 8002b3c:	eb4b 0303 	adc.w	r3, fp, r3
 8002b40:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b50:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002b54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	18db      	adds	r3, r3, r3
 8002b5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b5e:	4613      	mov	r3, r2
 8002b60:	eb42 0303 	adc.w	r3, r2, r3
 8002b64:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002b6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002b6e:	f7fd fb53 	bl	8000218 <__aeabi_uldivmod>
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	4611      	mov	r1, r2
 8002b78:	4b3d      	ldr	r3, [pc, #244]	@ (8002c70 <UART_SetConfig+0x2f4>)
 8002b7a:	fba3 2301 	umull	r2, r3, r3, r1
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	2264      	movs	r2, #100	@ 0x64
 8002b82:	fb02 f303 	mul.w	r3, r2, r3
 8002b86:	1acb      	subs	r3, r1, r3
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002b8e:	4b38      	ldr	r3, [pc, #224]	@ (8002c70 <UART_SetConfig+0x2f4>)
 8002b90:	fba3 2302 	umull	r2, r3, r3, r2
 8002b94:	095b      	lsrs	r3, r3, #5
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002b9c:	441c      	add	r4, r3
 8002b9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ba8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002bac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002bb0:	4642      	mov	r2, r8
 8002bb2:	464b      	mov	r3, r9
 8002bb4:	1891      	adds	r1, r2, r2
 8002bb6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002bb8:	415b      	adcs	r3, r3
 8002bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002bc0:	4641      	mov	r1, r8
 8002bc2:	1851      	adds	r1, r2, r1
 8002bc4:	6339      	str	r1, [r7, #48]	@ 0x30
 8002bc6:	4649      	mov	r1, r9
 8002bc8:	414b      	adcs	r3, r1
 8002bca:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bcc:	f04f 0200 	mov.w	r2, #0
 8002bd0:	f04f 0300 	mov.w	r3, #0
 8002bd4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002bd8:	4659      	mov	r1, fp
 8002bda:	00cb      	lsls	r3, r1, #3
 8002bdc:	4651      	mov	r1, sl
 8002bde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002be2:	4651      	mov	r1, sl
 8002be4:	00ca      	lsls	r2, r1, #3
 8002be6:	4610      	mov	r0, r2
 8002be8:	4619      	mov	r1, r3
 8002bea:	4603      	mov	r3, r0
 8002bec:	4642      	mov	r2, r8
 8002bee:	189b      	adds	r3, r3, r2
 8002bf0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002bf4:	464b      	mov	r3, r9
 8002bf6:	460a      	mov	r2, r1
 8002bf8:	eb42 0303 	adc.w	r3, r2, r3
 8002bfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002c0c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002c10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002c14:	460b      	mov	r3, r1
 8002c16:	18db      	adds	r3, r3, r3
 8002c18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	eb42 0303 	adc.w	r3, r2, r3
 8002c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002c2a:	f7fd faf5 	bl	8000218 <__aeabi_uldivmod>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4b0f      	ldr	r3, [pc, #60]	@ (8002c70 <UART_SetConfig+0x2f4>)
 8002c34:	fba3 1302 	umull	r1, r3, r3, r2
 8002c38:	095b      	lsrs	r3, r3, #5
 8002c3a:	2164      	movs	r1, #100	@ 0x64
 8002c3c:	fb01 f303 	mul.w	r3, r1, r3
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	3332      	adds	r3, #50	@ 0x32
 8002c46:	4a0a      	ldr	r2, [pc, #40]	@ (8002c70 <UART_SetConfig+0x2f4>)
 8002c48:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4c:	095b      	lsrs	r3, r3, #5
 8002c4e:	f003 0207 	and.w	r2, r3, #7
 8002c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4422      	add	r2, r4
 8002c5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c5c:	e10a      	b.n	8002e74 <UART_SetConfig+0x4f8>
 8002c5e:	bf00      	nop
 8002c60:	40011000 	.word	0x40011000
 8002c64:	40011400 	.word	0x40011400
 8002c68:	40011800 	.word	0x40011800
 8002c6c:	40011c00 	.word	0x40011c00
 8002c70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c7e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002c82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002c86:	4642      	mov	r2, r8
 8002c88:	464b      	mov	r3, r9
 8002c8a:	1891      	adds	r1, r2, r2
 8002c8c:	6239      	str	r1, [r7, #32]
 8002c8e:	415b      	adcs	r3, r3
 8002c90:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c96:	4641      	mov	r1, r8
 8002c98:	1854      	adds	r4, r2, r1
 8002c9a:	4649      	mov	r1, r9
 8002c9c:	eb43 0501 	adc.w	r5, r3, r1
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	f04f 0300 	mov.w	r3, #0
 8002ca8:	00eb      	lsls	r3, r5, #3
 8002caa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cae:	00e2      	lsls	r2, r4, #3
 8002cb0:	4614      	mov	r4, r2
 8002cb2:	461d      	mov	r5, r3
 8002cb4:	4643      	mov	r3, r8
 8002cb6:	18e3      	adds	r3, r4, r3
 8002cb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002cbc:	464b      	mov	r3, r9
 8002cbe:	eb45 0303 	adc.w	r3, r5, r3
 8002cc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002cd2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002cd6:	f04f 0200 	mov.w	r2, #0
 8002cda:	f04f 0300 	mov.w	r3, #0
 8002cde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002ce2:	4629      	mov	r1, r5
 8002ce4:	008b      	lsls	r3, r1, #2
 8002ce6:	4621      	mov	r1, r4
 8002ce8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cec:	4621      	mov	r1, r4
 8002cee:	008a      	lsls	r2, r1, #2
 8002cf0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002cf4:	f7fd fa90 	bl	8000218 <__aeabi_uldivmod>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	4b60      	ldr	r3, [pc, #384]	@ (8002e80 <UART_SetConfig+0x504>)
 8002cfe:	fba3 2302 	umull	r2, r3, r3, r2
 8002d02:	095b      	lsrs	r3, r3, #5
 8002d04:	011c      	lsls	r4, r3, #4
 8002d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d10:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002d14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002d18:	4642      	mov	r2, r8
 8002d1a:	464b      	mov	r3, r9
 8002d1c:	1891      	adds	r1, r2, r2
 8002d1e:	61b9      	str	r1, [r7, #24]
 8002d20:	415b      	adcs	r3, r3
 8002d22:	61fb      	str	r3, [r7, #28]
 8002d24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d28:	4641      	mov	r1, r8
 8002d2a:	1851      	adds	r1, r2, r1
 8002d2c:	6139      	str	r1, [r7, #16]
 8002d2e:	4649      	mov	r1, r9
 8002d30:	414b      	adcs	r3, r1
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	f04f 0300 	mov.w	r3, #0
 8002d3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d40:	4659      	mov	r1, fp
 8002d42:	00cb      	lsls	r3, r1, #3
 8002d44:	4651      	mov	r1, sl
 8002d46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d4a:	4651      	mov	r1, sl
 8002d4c:	00ca      	lsls	r2, r1, #3
 8002d4e:	4610      	mov	r0, r2
 8002d50:	4619      	mov	r1, r3
 8002d52:	4603      	mov	r3, r0
 8002d54:	4642      	mov	r2, r8
 8002d56:	189b      	adds	r3, r3, r2
 8002d58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d5c:	464b      	mov	r3, r9
 8002d5e:	460a      	mov	r2, r1
 8002d60:	eb42 0303 	adc.w	r3, r2, r3
 8002d64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d72:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002d80:	4649      	mov	r1, r9
 8002d82:	008b      	lsls	r3, r1, #2
 8002d84:	4641      	mov	r1, r8
 8002d86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d8a:	4641      	mov	r1, r8
 8002d8c:	008a      	lsls	r2, r1, #2
 8002d8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002d92:	f7fd fa41 	bl	8000218 <__aeabi_uldivmod>
 8002d96:	4602      	mov	r2, r0
 8002d98:	460b      	mov	r3, r1
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	4b38      	ldr	r3, [pc, #224]	@ (8002e80 <UART_SetConfig+0x504>)
 8002d9e:	fba3 2301 	umull	r2, r3, r3, r1
 8002da2:	095b      	lsrs	r3, r3, #5
 8002da4:	2264      	movs	r2, #100	@ 0x64
 8002da6:	fb02 f303 	mul.w	r3, r2, r3
 8002daa:	1acb      	subs	r3, r1, r3
 8002dac:	011b      	lsls	r3, r3, #4
 8002dae:	3332      	adds	r3, #50	@ 0x32
 8002db0:	4a33      	ldr	r2, [pc, #204]	@ (8002e80 <UART_SetConfig+0x504>)
 8002db2:	fba2 2303 	umull	r2, r3, r2, r3
 8002db6:	095b      	lsrs	r3, r3, #5
 8002db8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002dbc:	441c      	add	r4, r3
 8002dbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	673b      	str	r3, [r7, #112]	@ 0x70
 8002dc6:	677a      	str	r2, [r7, #116]	@ 0x74
 8002dc8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002dcc:	4642      	mov	r2, r8
 8002dce:	464b      	mov	r3, r9
 8002dd0:	1891      	adds	r1, r2, r2
 8002dd2:	60b9      	str	r1, [r7, #8]
 8002dd4:	415b      	adcs	r3, r3
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ddc:	4641      	mov	r1, r8
 8002dde:	1851      	adds	r1, r2, r1
 8002de0:	6039      	str	r1, [r7, #0]
 8002de2:	4649      	mov	r1, r9
 8002de4:	414b      	adcs	r3, r1
 8002de6:	607b      	str	r3, [r7, #4]
 8002de8:	f04f 0200 	mov.w	r2, #0
 8002dec:	f04f 0300 	mov.w	r3, #0
 8002df0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002df4:	4659      	mov	r1, fp
 8002df6:	00cb      	lsls	r3, r1, #3
 8002df8:	4651      	mov	r1, sl
 8002dfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dfe:	4651      	mov	r1, sl
 8002e00:	00ca      	lsls	r2, r1, #3
 8002e02:	4610      	mov	r0, r2
 8002e04:	4619      	mov	r1, r3
 8002e06:	4603      	mov	r3, r0
 8002e08:	4642      	mov	r2, r8
 8002e0a:	189b      	adds	r3, r3, r2
 8002e0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e0e:	464b      	mov	r3, r9
 8002e10:	460a      	mov	r2, r1
 8002e12:	eb42 0303 	adc.w	r3, r2, r3
 8002e16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e22:	667a      	str	r2, [r7, #100]	@ 0x64
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	f04f 0300 	mov.w	r3, #0
 8002e2c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002e30:	4649      	mov	r1, r9
 8002e32:	008b      	lsls	r3, r1, #2
 8002e34:	4641      	mov	r1, r8
 8002e36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e3a:	4641      	mov	r1, r8
 8002e3c:	008a      	lsls	r2, r1, #2
 8002e3e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002e42:	f7fd f9e9 	bl	8000218 <__aeabi_uldivmod>
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e80 <UART_SetConfig+0x504>)
 8002e4c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e50:	095b      	lsrs	r3, r3, #5
 8002e52:	2164      	movs	r1, #100	@ 0x64
 8002e54:	fb01 f303 	mul.w	r3, r1, r3
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	3332      	adds	r3, #50	@ 0x32
 8002e5e:	4a08      	ldr	r2, [pc, #32]	@ (8002e80 <UART_SetConfig+0x504>)
 8002e60:	fba2 2303 	umull	r2, r3, r2, r3
 8002e64:	095b      	lsrs	r3, r3, #5
 8002e66:	f003 020f 	and.w	r2, r3, #15
 8002e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4422      	add	r2, r4
 8002e72:	609a      	str	r2, [r3, #8]
}
 8002e74:	bf00      	nop
 8002e76:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e80:	51eb851f 	.word	0x51eb851f

08002e84 <memset>:
 8002e84:	4402      	add	r2, r0
 8002e86:	4603      	mov	r3, r0
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d100      	bne.n	8002e8e <memset+0xa>
 8002e8c:	4770      	bx	lr
 8002e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e92:	e7f9      	b.n	8002e88 <memset+0x4>

08002e94 <__libc_init_array>:
 8002e94:	b570      	push	{r4, r5, r6, lr}
 8002e96:	4d0d      	ldr	r5, [pc, #52]	@ (8002ecc <__libc_init_array+0x38>)
 8002e98:	4c0d      	ldr	r4, [pc, #52]	@ (8002ed0 <__libc_init_array+0x3c>)
 8002e9a:	1b64      	subs	r4, r4, r5
 8002e9c:	10a4      	asrs	r4, r4, #2
 8002e9e:	2600      	movs	r6, #0
 8002ea0:	42a6      	cmp	r6, r4
 8002ea2:	d109      	bne.n	8002eb8 <__libc_init_array+0x24>
 8002ea4:	4d0b      	ldr	r5, [pc, #44]	@ (8002ed4 <__libc_init_array+0x40>)
 8002ea6:	4c0c      	ldr	r4, [pc, #48]	@ (8002ed8 <__libc_init_array+0x44>)
 8002ea8:	f000 f818 	bl	8002edc <_init>
 8002eac:	1b64      	subs	r4, r4, r5
 8002eae:	10a4      	asrs	r4, r4, #2
 8002eb0:	2600      	movs	r6, #0
 8002eb2:	42a6      	cmp	r6, r4
 8002eb4:	d105      	bne.n	8002ec2 <__libc_init_array+0x2e>
 8002eb6:	bd70      	pop	{r4, r5, r6, pc}
 8002eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ebc:	4798      	blx	r3
 8002ebe:	3601      	adds	r6, #1
 8002ec0:	e7ee      	b.n	8002ea0 <__libc_init_array+0xc>
 8002ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ec6:	4798      	blx	r3
 8002ec8:	3601      	adds	r6, #1
 8002eca:	e7f2      	b.n	8002eb2 <__libc_init_array+0x1e>
 8002ecc:	08002f14 	.word	0x08002f14
 8002ed0:	08002f14 	.word	0x08002f14
 8002ed4:	08002f14 	.word	0x08002f14
 8002ed8:	08002f18 	.word	0x08002f18

08002edc <_init>:
 8002edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ede:	bf00      	nop
 8002ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ee2:	bc08      	pop	{r3}
 8002ee4:	469e      	mov	lr, r3
 8002ee6:	4770      	bx	lr

08002ee8 <_fini>:
 8002ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eea:	bf00      	nop
 8002eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eee:	bc08      	pop	{r3}
 8002ef0:	469e      	mov	lr, r3
 8002ef2:	4770      	bx	lr
